---
title: "Python for Data Science - Exercises"
toc: true
---

# Datatypes and Variables

## Exercises 1

### What does Python return as result of the following calculations?

```{python}
print(f"10 + 10 + 10 = {10 + 10 + 10}")
print(f"10 - 3       = {10 - 3}")
print(f"10 * 2       = {10 * 2}")
print(f"5 / 2        = {5 / 2}")
print(f"5.0 / 2      = {5.0 / 2}")
print(f"5 % 2        = {5 % 2}")
print(f"10 % 3       = {10 % 3}")
print(f"3 ** 3       = {3 ** 3}")
print(f"9 ** 0.5     = {9 ** 0.5}")
print(f"10 + 3 * 3   = {10 + 3 * 3}")
print(f"(10 + 3) * 3 = {(10 + 3) * 3}")

```

### Try to find out: What happens?

```{python}
a = 23
b = 23
print(f"a = {a}")
print(f"The ID of a is {id(a)}") # Prints memory address of the variable a
print(f"a is of type {type(a)}") # Prints the data type of the variable a
```

> Note: `id()` corresponds to the objects memory address during its lifetime.

```{python}
print(f"b = {b}")
print(f"The ID of b is {id(b)}")
print(f"b is of type {type(a)}")
```

### Change the value of variable "a"

```{python}
a = 123 # Reassign var a to int 123
print(f"a = {a}")
print(f"The ID of a is {id(a)}")
print(f"a is of type {type(a)}")
```

### What happens now? why?

```{python}
c = 23
print(f"c = {c}")
print(f"The ID of a is {id(c)}")
print(f"c is of type {type(c)}")
```

We assign the variable `c` to the value `23` and check its data type and memory location.

### Try the same thing with a float variable!!!

```{python}
d = 3.142
print(f"d = {d}")
print(f"The ID of a is {id(d)}")
print(f"d is of type {type(d)}")
```

### Printing of text (strings)

```{python}
print ("HSLU's Python course is cool")

print("This is Line 1")
print("This is Line 2")

print("\nWhat does the \\n control character do? Are you sure?") # \n is a line break

print("\tWhat does the \\t control character do? Are you sure?") # \t is a tabulator

print("I want to learn python because....")
print("\n\n\t....it's a cool data science programming language. Ok - there are also others ;-) !")

print("What " + "is " + "wrong?" + "\nAdd some space between the words without removing the '+' signs!") # Add spaces after the string
```

### try to understand the behaviour

```{python}
g=h='hslu'      # Assign the var g and h to the string "hslu"
print(g)        # Prints hslu
print(h)        # Print hslu
h=456           # Reassign h to int 456
print(h)        # Prints 456
h=h+1           # Calculates 456 + 1 = 457
print(h)        # Prints 457
h+=1            # Calculates 457 + 1 = 458
print(h)        # Prints 458
p='hslu'        # Assign the var p to the string "hslu"
q=p             # Copies the var p (hlsu) to the var q
print(p==q)     # Compare the var p and q (Output: True)
print(p is q)   # Compare the var p and q (Output: True)
```

# Conditions

## Task 1
Create a simple program in which three whole numbers (potentially negative!) are read in from the keyboard and afterwards get displayed on the screen in ascending order. Use nested if-statements for order determination (i.e. no built-in- 'sort' function).

### Using if-else-statements

```{python}
inputs = [] # Set up storage

print("Please input 3 whole numbers of your choise.")
"""
input1 = int(input("Number one: ")) # Assign input to a variable
input2 = int(input("Number two: "))
input3 = int(input("Number tree: "))
"""

# Use fake user inputs
input1 = -3
input2 = 10
input3 = -6

# Sort list
if input1 < input2 and input1 < input3:
    inputs.append(input1) # Append input to list
    if input2 < input3:
        inputs.append(input2)
        inputs.append(input3)
    else:
        inputs.append(input3)
        inputs.append(input2)
elif input2 < input1 and input2 < input3:
    inputs.append(input2)
    if input1 < input3:
        inputs.append(input1)
        inputs.append(input3)
    else:
        inputs.append(input3)
        inputs.append(input1)
elif input3 < input1 and input3 < input2:
    inputs.append(input3)
    if input1 < input2:
        inputs.append(input1)
        inputs.append(input2)
    else:
        inputs.append(input2)
        inputs.append(input1)

print(inputs)
```

### Using build in function `sorted()`

```{python}
inputs = [] # Set up storage

print("Please input 3 whole numbers of your choise.")
"""
input1 = int(input("Number one: ")) # Assign input to a variable
inputs.append(input1)
input2 = int(input("Number two: "))
inputs.append(input2)
input3 = int(input("Number tree: "))
inputs.append(input3)
"""

# Use fake user inputs
input1 = -3
inputs.append(input1)
input2 = 10
inputs.append(input2)
input3 = -6
inputs.append(input3)

# Sort list
inputs = sorted(inputs)
print(inputs)
```

## Task 2

### a
Assumption: The int variables a, b and c are declared and initialized.

Define a conditional expression "EXPR" in such a way that the body of the expression

if EXPR:
    print("condition fulfilled")

is only carried out if:
a is greater than b OR a is less than half of b OR the sum of a and c is greater than b.


Check your result:
a=1, b=2, c=2 -> True
a=1, b=2, c=1 -> False

```{python}
# Test case one
a = 1
b = 2
c = 2

if a > b or a < b/2 or sum([a, c]) > b:
    print("condition fulfilled")
else:
    print("condition not fulfilled")
```

```{python}
# Test case two
a = 1
b = 2
c = 1

if a > b or a < b/2 or sum([a, c]) > b:
    print("condition fulfilled")
else:
    print("condition not fulfilled")
```

### b

Assumption: The int variables a, b and c are declared and initialized.

Define a conditional expression "EXPR" in such a way that the body of the expression

if EXPR:
    print("condition fulfilled")

is only carried out if:
half of the number a is an odd number OR the subtraction of the numbers b and c results in an even number OR both a and b and also b and c have different values.

Check your result:
a=6, b=2, c=0 => True
a=5, b=2, c=1 => True
a=5, b=5, c=2 => False

```{python}
# Test case one
a = 6
b = 2
c = 0

if a/2 % 2 == 1 or b - c % 2 == 0 or a != b and b != c:
        print("condition fulfilled")
else:
    print("condition not fulfilled")
```

```{python}
# Test case two
# Test case one
a = 5
b = 2
c = 1

if a/2 % 2 == 1 or b - c % 2 == 0 or a != b and b != c:
        print("condition fulfilled")
else:
    print("condition not fulfilled")
```

```{python}
# Test case three
# Test case one
a = 5
b = 5
c = 2

if a/2 % 2 == 1 or b - c % 2 == 0 or a != b and b != c:
        print("condition fulfilled")
else:
    print("condition not fulfilled")
```

# Loops and Conditions

## Exercise 1

Write a python program that constructs the following pattern using a nested for loop:

```{txt}
*
**
***
****
*****
****
***
**
*
```

```{python}
upper  = range(0, 6, 1) # Define upper pattern
lower = range(6, 0, -1) # Define lower pattern


for i in upper:
    print("*" * i) # Print upper part of pattern
else: # After done
    for j in lower:
        print("*" * j) # Print lower part of pattern
```

## Exercise 2

Write a python program to count the number of even and odd numbers contained in a sequence of numbers.

```{python}
even_numbers = []
odd_numbers = []
numbers = (1,2,3,4,5,6,7,8,9,10)

for i in range(len(numbers)):
    if i % 2 == 0: # Check if current number is even
        even_numbers.append(i)
    else:
        odd_numbers.append(i)

print(f"Total number of even numbers: {len(even_numbers)}") # Use len() to count
print(f"Total number of even numbers: {len(odd_numbers)}")
```

## Exercise 3

Write a Python program which takes two digits m (row) and n (column) as input and
generates a two-dimensional structure (e.g. nested list). The value in the i-th row and j-th column 
should be i*j.

```{python}
rows = 3
columns = 4
result = [] # Define master list

for row in range(rows):
    sub_list = [] # Define sub-list
    for column in range(columns):
        sub_list.append(row * column) # Calc value
    result.append(sub_list) # Append sub-list to master list

print(result)
```

## Exercise 4
Write a Python program to find all numbers between 200 and 500 (limits included) only containing even digits.
Correct solution: 

```{python}
my_range = range(200, 501) # Include boarders
even_digit_numbers = [] # Final result

for number in my_range: 
    test_result = []
    for digit in str(number):
        if int(digit) % 2 == 1:
            test_result.append(True) # Add true for odd digit
        else:
            test_result.append(False) # Add false for even digit
    if any(test_result):
        pass # Pass if any odd digit (false) is in test_result
    else:
        even_digit_numbers.append(number) # Append to final result

print(even_digit_numbers)
```

## Exercise 5

Write a Python program to guess a number between 1 to 10.
First: Use the predefined code block to create a random number
Second:
The user is prompted to enter a guess. If the guess is wrong a message
"to big" or "to small" is printed to the console and the prompt (user
input) appears again until the guess is correct. If the guess is correct, "Well guessed!" will be printed and the program ends.
Extension:
The number of trials should be prompted as well: "Well done - you have tried it 4 times!"

```{python}
# Code block to create a random number
from random import randint
random_number = randint(1,10)
# End code block to create a random number

trials = 0

while True: # Infinitive loop till break
    # Unsing fake user input
    user_input = randint(1,10) # Also random
    trials += 1 # Count trials
    if user_input == random_number:
        print(f"Well done - you have tried it {trials} times!")
        break
    elif user_input < random_number:
        print("Guess to low...")
    else:
        print("Guess to high...")
```

## Exercise 6
Suppose we wish to draw a Christmas tree.
Example tree - desired height: 8
The result looks like:

```{txt}
     x
    xxx
   xxxxx
  xxxxxxx
 xxxxxxxxx
xxxxxxxxxxx
    xxx
    xxx
```

Create a program that asks the user for the height of the Christmas tree (trunk included)
and then draws the tree. The height of the trunk is always 2 and the width is 3 in case the entire height is > 5 and 1 in case the tree is smaller.

```{python}
total_height = 8
trunk_height = 2
crown_height = total_height - trunk_height
max_crown_width = 2 * (crown_height - 1) + 1

if total_height > 5:
    trunk_width = 3
else:
    trunk_width = 1

i = 0
while i < crown_height:
    current_crown_width = 2 * i + 1
    spaces = (max_crown_width - current_crown_width) // 2
    print(" " * spaces + "x" * current_crown_width)
    i += 1

trunk_padding = (max_crown_width - trunk_width) // 2

j = 0
while j < trunk_height:
    print(" " * trunk_padding + "x" * trunk_width)
    j += 1
```
