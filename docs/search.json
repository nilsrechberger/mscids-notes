[
  {
    "objectID": "howTo/python.html",
    "href": "howTo/python.html",
    "title": "How to‚Ä¶ Python",
    "section": "",
    "text": "Python is a programming language designed for its simple readability and ease of use.\nPython is primarily executed as an interpreted language. This means that when you run your Python code, the Python Interpreter (which you get when you install Python) translates the code line by line into machine code that the computer understands at runtime (while the program is running).\nWhat you install: Installing Python primarily downloads the Python Interpreter ‚Äì the ‚Äútranslator‚Äù that makes your scripts work."
  },
  {
    "objectID": "howTo/python.html#interactively-in-the-terminal",
    "href": "howTo/python.html#interactively-in-the-terminal",
    "title": "How to‚Ä¶ Python",
    "section": "Interactively in the Terminal",
    "text": "Interactively in the Terminal\nThe terminal (also called Shell, PowerShell, or Command Line) is a text-based interface to your computer.\nBy running python3 (or just python on some systems), you start the interactive interpreter and can directly enter and immediately execute Python commands: Bash\npython3\nTo exit the Python interpreter and return to the regular terminal, use the quit() function: Python\nquit()"
  },
  {
    "objectID": "howTo/python.html#as-a-python-script-file",
    "href": "howTo/python.html#as-a-python-script-file",
    "title": "How to‚Ä¶ Python",
    "section": "As a Python Script (File)",
    "text": "As a Python Script (File)\nIf you want to save code and run it repeatedly, you write it into a Python file (file extension .py). Python code is plain text, so you can create and edit it with any text editor.\nTo run a script, you enter the interpreter command followed by the path to your file in the terminal:\n\n# my_script.py\n\nfor i in range(1, 4):\n    print(i)\n\n1\n2\n3\n\n\npython3 path/to/my_script.py"
  },
  {
    "objectID": "howTo/pythonProject.html",
    "href": "howTo/pythonProject.html",
    "title": "How to‚Ä¶ Python Project",
    "section": "",
    "text": "When starting a new Python project, I follow a consistent setup workflow. This approach ensures a fast, clean, and professional start every time.\n\nNote: Even if some steps (like creating certain subdirectories) aren‚Äôt immediately necessary, I perform them upfront. It‚Äôs better to be ready than to interrupt a session later to add structure."
  },
  {
    "objectID": "howTo/pythonProject.html#create-the-project-folder",
    "href": "howTo/pythonProject.html#create-the-project-folder",
    "title": "How to‚Ä¶ Python Project",
    "section": "1. Create the Project Folder",
    "text": "1. Create the Project Folder\nFirst, we create an empty directory to serve as our project‚Äôs root.\nmkdir my_project\nRemember to navigate into your new project folder:\ncd my_project"
  },
  {
    "objectID": "howTo/pythonProject.html#initialize-a-git-repository",
    "href": "howTo/pythonProject.html#initialize-a-git-repository",
    "title": "How to‚Ä¶ Python Project",
    "section": "2. Initialize a Git Repository",
    "text": "2. Initialize a Git Repository\nTo enable version control and code tracking, we initialize a new Git repository within the project folder.\ngit init"
  },
  {
    "objectID": "howTo/pythonProject.html#create-essential-subdirectories",
    "href": "howTo/pythonProject.html#create-essential-subdirectories",
    "title": "How to‚Ä¶ Python Project",
    "section": "3. Create Essential Subdirectories",
    "text": "3. Create Essential Subdirectories\nI always create the subdirectories src, data, and img, even if I don‚Äôt need all of them at the start.\nsrc: Stores all source code files (the heart of the project). data: Intended for project-specific datasets and external data. img: For images, figures, and plots generated or used by the project.\nmkdir src data img"
  },
  {
    "objectID": "howTo/pythonProject.html#create-necessary-files",
    "href": "howTo/pythonProject.html#create-necessary-files",
    "title": "How to‚Ä¶ Python Project",
    "section": "4. Create Necessary Files",
    "text": "4. Create Necessary Files\nA standard Python project requires a few essential configuration and documentation files:\n\nREADME.md: A Markdown file containing an overview, installation, and usage instructions for the project.\nrequirements.txt: A text file listing all necessary Python package dependencies.\n.env: A special file for storing environment-specific variables, such as API keys or configuration settings (it should always be ignored by Git).\n.gitignore: A file listing all files and folders that Git should not track (e.g., virtual environments, large data files, and sensitive info).\n\ntouch README.md requirements.txt .env .gitignore"
  },
  {
    "objectID": "howTo/pythonProject.html#create-and-activate-a-python-virtual-environment",
    "href": "howTo/pythonProject.html#create-and-activate-a-python-virtual-environment",
    "title": "How to‚Ä¶ Python Project",
    "section": "5. Create and Activate a Python Virtual Environment",
    "text": "5. Create and Activate a Python Virtual Environment\nTo prevent package dependency conflicts with other projects or the system Python installation, it‚Äôs crucial to use a new virtual environment (venv) for every project.\npython3 -m venv .venv\n\nNote: This creates a folder named .venv containing the isolated Python environment\n\nYou must activate the environment before installing packages or running your code.\n# For Mac/Linux\n. .venv/bin/activate\n\n# For Windowns (PowerShell)\n.venv\\Scripts\\Activate.ps1\n\n# For Windowns (CMD)\n.\\.venv\\Scripts\\activate.bat\n\nNote: Check your venv setup with pip list: there should be no installations listed except pip."
  },
  {
    "objectID": "howTo/pythonProject.html#configure-the-.gitignore-file",
    "href": "howTo/pythonProject.html#configure-the-.gitignore-file",
    "title": "How to‚Ä¶ Python Project",
    "section": "6. Configure the .gitignore File",
    "text": "6. Configure the .gitignore File\nThe .gitignore file tells Git which files and folders to ignore. Git isn‚Äôt designed to track large binary files (like datasets or images) or sensitive data (like passwords).\n\nNote: Also ignore the .env and .venv files.\n\necho \".venv\" &gt;&gt; .gitignore\necho \".env\" &gt;&gt; .gitignore\necho \"data/\" &gt;&gt; .gitignore\necho \"img/\" &gt;&gt; .gitignore"
  },
  {
    "objectID": "howTo/pythonProject.html#add-the-initial-commit-to-git",
    "href": "howTo/pythonProject.html#add-the-initial-commit-to-git",
    "title": "How to‚Ä¶ Python Project",
    "section": "7. Add the Initial Commit to Git",
    "text": "7. Add the Initial Commit to Git\nFinally, we stage all the newly created structural files and make the project‚Äôs first official commit.\ngit add -A\ngit commit -m \"Initial project setup\"\nYou are now ready to start coding your Python project!"
  },
  {
    "objectID": "howTo/terminal.html",
    "href": "howTo/terminal.html",
    "title": "How to‚Ä¶ Terminal",
    "section": "",
    "text": "The Terminal (also called Shell, Console, PowerShell, or Command Line) is a text-based interface to your computer. Back in time, when there were no fancy graphical user interfaces (UIs), you had to use the terminal to interact with your computer. Nowadays, we often use the mouse. Nevertheless, the terminal offers some significant advantages and is indispensable in many fields."
  },
  {
    "objectID": "howTo/terminal.html#navigating-the-terminal",
    "href": "howTo/terminal.html#navigating-the-terminal",
    "title": "How to‚Ä¶ Terminal",
    "section": "Navigating the Terminal",
    "text": "Navigating the Terminal\nWhen you open your terminal, it usually shows your username, your device name, and the Current Working Directory ‚Äî your current ‚Äúposition‚Äù in the file system. Sometimes, there is just the $-symbol, which often means you are in your Home Directory (the starting point).\nUse pwd (Print Working Directory) to show your current ‚Äúposition‚Äù:\npwd\nBy using cd (Change Directory) followed by a path, you can move to that position:\ncd path/to/my/notes\n\nNote: cd is used to go to a folder (directory), not a file.\n\nTo move back to the parent directory (one level up), use ..:\ncd .."
  },
  {
    "objectID": "howTo/terminal.html#getting-an-overview",
    "href": "howTo/terminal.html#getting-an-overview",
    "title": "How to‚Ä¶ Terminal",
    "section": "Getting an Overview",
    "text": "Getting an Overview\nWhen you arrive at a folder, you may want to know what‚Äôs inside. Use ls (List) to list the contents of the folder:\nls"
  },
  {
    "objectID": "howTo/terminal.html#parameters-and-options",
    "href": "howTo/terminal.html#parameters-and-options",
    "title": "How to‚Ä¶ Terminal",
    "section": "Parameters and Options",
    "text": "Parameters and Options\nSometimes, you can add a parameter or option to the command to get a special output. For instance, ls does not show hidden files by default. Running ls -a (all) lists all files in a folder, including the hidden ones:\nls -a\n\nNote: Any file can be made hidden by adding a period (.) to the beginning of the file name: .hidden_notes.txt."
  },
  {
    "objectID": "howTo/terminal.html#most-used-commands",
    "href": "howTo/terminal.html#most-used-commands",
    "title": "How to‚Ä¶ Terminal",
    "section": "Most Used Commands",
    "text": "Most Used Commands\nHere is a quick list of the most frequently used commands:\n\npwd: Print Working Directory (Shows the current directory).\nls: List (Lists all files in a directory).\ncd: Change Directory (Changes the current directory).\ntouch: Creates a new, empty file.\nmv: Move (Moves a file or renames it).\nrm: Remove (Deletes a file or directory)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mscids-notes",
    "section": "",
    "text": "Hey there, fellow students! üëã\nHere you‚Äôll find a collection of my personal notes and solutions from our courses. I‚Äôve decided to put them online in the hopes that they might help some of you out.\n\nQuick Heads-Up! üìù\nJust a friendly reminder: everything you see here is based on my own understanding and approach. That means my solutions might be different from the official ones provided by our professors.\nThink of this as a secondary resource to complement your own work, not as an official answer key.\n\n\nDisclaimer üö®\nWhile I do my best, I can‚Äôt guarantee that everything is 100% correct or complete. I‚Äôm just a student trying to figure things out, same as you. Therefore, I‚Äôm not taking any responsibility for the accuracy of the content. Always double-check with official course materials!\n\n\nSpotted a Mistake? üëÄ\nIf you happen to find an error, I‚Äôd be super grateful if you could let me know. Just shoot me a quick email!\nüìß nils.rechberger@stud.hslu.ch\nHappy studying! üöÄ"
  },
  {
    "objectID": "hs25/csc/csc_exercises.html",
    "href": "hs25/csc/csc_exercises.html",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "",
    "text": "Format: IIIIIIII.FFFF (8 bits integer, 4 bits fraction)\nExample: 45.375\n\n\n\nMethod: Repeatedly divide by 2 & note the remainder.\nCalculation:\n\n45 / 2 = 22 Remainder 1\n22 / 2 = 11 Remainder 0\n11 / 2 = 5 Remainder 1\n5 / 2  = 2 Remainder 1\n2 / 2  = 1 Remainder 0\n1 / 2  = 0 Remainder 1\n\nResult (read remainders from bottom to top): 101101\nPad to 8 bits (on the left): 00101101\n\n\n\n\n\nMethod: Repeatedly multiply by 2 & note the integer part.\nCalculation:\n\n0.375 * 2 = 0.75 -&gt; 0\n0.75  * 2 = 1.5 -&gt; 1\n0.5   * 2 = 1.0 -&gt; 1\n\nResult (read digits from top to bottom): 011\nPad to 4 bits (on the right): 0110\n\n\n\n\n\nInteger: 00101101\nFraction: 0110\nFinal (12-Bit): 001011010110\n\n\n\n\nNot every fraction can be represented exactly.\nInteger 2 -&gt; 00000010\nFraction 0.3 -&gt; 0.010011... (repeating)\nTruncated to 4 bits: 0100 (which represents 0.25)\nFinal result for 2.3: 000000100100 (represents 2.25)"
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-1-internet-delays-and-routes",
    "href": "hs25/csc/csc_exercises.html#exercise-1-internet-delays-and-routes",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 1: Internet Delays and Routes",
    "text": "Exercise 1: Internet Delays and Routes\n\na\nTraceroute is a command line tool for determining the transport route of IP data packets between your own computer and a selected remote station.\ntraceroute gaia.cs.umass.edu\n\n\nb\nThe number of routers along the path depends on the network route and topology ‚Äî for example, whether a VPN or proxy is used, but not on the local access medium (WiFi vs.¬†Ethernet)."
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-2-internet-delays",
    "href": "hs25/csc/csc_exercises.html#exercise-2-internet-delays",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 2: Internet Delays",
    "text": "Exercise 2: Internet Delays\n\na\n\\[\n\\text{file} = 4\\text{MB} = 4000\\text{bytes} = 32000\\text{bites}\n\\]\n\\[\nR_s = 1\\text{Mbit/sec} = \\dfrac{32000}{1000} = 32\\text{sec}\n\\]"
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-3-domains-hosts-and-urls",
    "href": "hs25/csc/csc_exercises.html#exercise-3-domains-hosts-and-urls",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 3: Domains, Hosts and URLs",
    "text": "Exercise 3: Domains, Hosts and URLs\n\n\n\n\n\nflowchart TD\n    A(Root) --&gt; B(edu)\n    B --&gt; C[umass]\n    C --&gt; E(cs)\n    F[gaia]\n    D[www]\n\n    %% Subgraph trick\n    subgraph row1[ ]\n        direction LR\n        C\n        D\n    end\n\n    %% Subgraph trick\n    subgraph row2[ ]\n        direction LR\n        E\n        F\n    end"
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-4-http-protocol",
    "href": "hs25/csc/csc_exercises.html#exercise-4-http-protocol",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 4: http Protocol",
    "text": "Exercise 4: http Protocol\nWhenever a user downloads a new web page a copy is saved on the local web server (cache). If the same page is requested again later by the same or another user AND it is still valid (i.e., the expiration date has not yet been reached), the page does not have to be fetched again from the remote web server."
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-2-develop-a-web-page---task-1",
    "href": "hs25/csc/csc_exercises.html#exercise-2-develop-a-web-page---task-1",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 2: Develop a web page - Task 1",
    "text": "Exercise 2: Develop a web page - Task 1\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    Exercise 2: Develop a web page - Task 1\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;img src=\"img/siliconValley.jpg\" hight=\"1000\" width=\"500\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n  \n    Exercise 2: Develop a web page - Task 1"
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-2-develop-a-web-page---task-2",
    "href": "hs25/csc/csc_exercises.html#exercise-2-develop-a-web-page---task-2",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 2: Develop a web page - Task 2",
    "text": "Exercise 2: Develop a web page - Task 2\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    Exercise 2: Develop a web page - Task 2\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h2&gt;Links to well-known companies in Silicon Valley&lt;/h2&gt;\n    &lt;img src=\"img/tesla.png\"&gt;\n    &lt;h2&gt;Link to overview map Silicon Valley&lt;/h2&gt;\n    &lt;a href=\"https://siliconvalleyguide.info/\"&gt;Map&lt;/a&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n  \n    Exercise 2: Develop a web page - Task 2\n  \n\n  \n    Links to well-known companies in Silicon Valley\n    \n    Link to overview map Silicon Valley\n    Map"
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-3-develop-a-css-file",
    "href": "hs25/csc/csc_exercises.html#exercise-3-develop-a-css-file",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 3: Develop a CSS file",
    "text": "Exercise 3: Develop a CSS file\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Exercise 3: Develop a CSS file&lt;/title&gt;\n\n    &lt;style&gt;\n      body { \n        background-color: lightgoldenrodyellow;\n        color: blue;\n      }\n      \n      img {\n        border: 2px solid blue;\n        padding: 5px;\n      }\n      \n      a {\n        color: red;\n      }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h2&gt;Links to well-known companies in Silicon Valley&lt;/h2&gt;    \n    &lt;img src=\"img/tesla.png\" alt=\"Tesla Logo\"&gt;\n    &lt;h2&gt;Link to overview map Silicon Valley&lt;/h2&gt;\n    &lt;a href=\"https://siliconvalleyguide.info/\"&gt;Map&lt;/a&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;"
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-1",
    "href": "hs25/csc/csc_exercises.html#exercise-1",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 1",
    "text": "Exercise 1\nDevelop a recursive algorithm for the function power(x, n).\n\ndef power(x, n):\n    if n == 0:\n        return 1\n    else:\n        return x * power(x, n - 1)\n\nres = power(2, 3)\nprint(res)\n\n8"
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-2",
    "href": "hs25/csc/csc_exercises.html#exercise-2",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 2",
    "text": "Exercise 2\nDevelop a recursive algorithm for the product of the natural odd numbers from m to n: product(m, n).\n\ndef product(m: int, n: int) -&gt; int:\n  \"\"\" Returns the product of the odd numbers from m to n \"\"\"\n  # Check for only odd number inputs\n  assert m % 2 == 1 and n % 2 == 1\n\n  # Recursion\n  if m == n:\n    return m\n  else:\n    return m * product(m + 2, n)\n\n\nres = product(3, 11)\nprint(res)\n\n10395"
  },
  {
    "objectID": "hs25/csc/csc_exercises.html#exercise-3",
    "href": "hs25/csc/csc_exercises.html#exercise-3",
    "title": "Computer Science Concepts for Data Scientists - Exercises",
    "section": "Exercise 3",
    "text": "Exercise 3\n\n\n\nLinear Search\nLinear search sequentially checks each element of the list until a match is found or the whole list has been searched. For a list of length \\(n\\) results a complexity of \\(O(n)\\).\n\n\n\nBinary Search\nBinary search compares the target value to the middle element of the list. For a list of length \\(n\\) results a complexity of \\(O(\\log(n))\\).\n\n:::"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html",
    "href": "hs25/sa/sa_exercises.html",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "",
    "text": "It seems that, in total, the Allied and Axis countries had about the same number of civilian deaths. However, if we compare the numbers per party member, we see that the Axis countries had a higher average amount of deaths. On the other hand, the data from the Allies is inconsistent (see Denmark).\n\n\n\nThe percentages in the chart do not sum up to 100%.\n\n\n\n\n\nWe can assume that Linda is a bank teller and is active in the feminist movement. Her experiences from the past could have influenced her behavior and thinking on certain topics. She may have a sense for justice and equality, regardless of the topic.\n\n\n\nWe can assume that Steve is a librarian because of his helpful personality and his need for order and structure, much like what‚Äôs found in a library. His passion for details may also be connected to a desire for knowledge.\n\n\n\nA Ball costs $0.05.\n\n\n\nThere are more death by heart diseases than accidents.\n\n\n\n\nSince the engine is the only thing that keeps a plane in the air, it makes sense for it to be more armoured than the rest of the plane. Even if other parts have more bullet holes on average (e.g.¬†the fuselage), the plane could still fly."
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#a",
    "href": "hs25/sa/sa_exercises.html#a",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "",
    "text": "It seems that, in total, the Allied and Axis countries had about the same number of civilian deaths. However, if we compare the numbers per party member, we see that the Axis countries had a higher average amount of deaths. On the other hand, the data from the Allies is inconsistent (see Denmark)."
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#b",
    "href": "hs25/sa/sa_exercises.html#b",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "",
    "text": "The percentages in the chart do not sum up to 100%."
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#c",
    "href": "hs25/sa/sa_exercises.html#c",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "",
    "text": "We can assume that Linda is a bank teller and is active in the feminist movement. Her experiences from the past could have influenced her behavior and thinking on certain topics. She may have a sense for justice and equality, regardless of the topic.\n\n\n\nWe can assume that Steve is a librarian because of his helpful personality and his need for order and structure, much like what‚Äôs found in a library. His passion for details may also be connected to a desire for knowledge.\n\n\n\nA Ball costs $0.05.\n\n\n\nThere are more death by heart diseases than accidents."
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#d",
    "href": "hs25/sa/sa_exercises.html#d",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "",
    "text": "Since the engine is the only thing that keeps a plane in the air, it makes sense for it to be more armoured than the rest of the plane. Even if other parts have more bullet holes on average (e.g.¬†the fuselage), the plane could still fly."
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-1.3",
    "href": "hs25/sa/sa_exercises.html#problem-1.3",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 1.3",
    "text": "Problem 1.3\n\ngrades &lt;- c(4.2, 2.3, 5.6, 4.5, 4.8, 3.9, 5.9, 2.4, 5.9, 6, 4, 3.7, 5, 5.2, 4.5, 3.6, 5, 6, 2.8, 3.3, 5.5, 4.2, 4.9, 5.1)\n\ngrades &lt;- sort(grades) # Sort values\n\noriginal_mu &lt;- mean(grades)\noriginla_meadian &lt;- median(grades)\n\ngrades[9:11] &lt;- 1 # Reassign values\nnew_mu &lt;- mean(grades)\nnew_median &lt;- median(grades)\n\ncat(\"Original vs. New mean:\", original_mu, \"vs.\", new_mu, \"\\n\") # Add line break\n\nOriginal vs. New mean: 4.5125 vs. 4.1 \n\ncat(\"Median stays the same:\", originla_meadian, \"=\", new_median)\n\nMedian stays the same: 4.65 = 4.65"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#probmel-2.1",
    "href": "hs25/sa/sa_exercises.html#probmel-2.1",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Probmel 2.1",
    "text": "Probmel 2.1\n\na\n\n# Read data\ndata &lt;- read.csv('/home/nils/dev/mscids-notes/hs25/sa/data/husband_wife.csv')\nhead(data)\n\n  age.husband height.husband age.wife height.wife\n1          49            180       43         159\n2          25            184       28         156\n3          40            165       30         162\n4          52            177       57         154\n5          58            161       52         142\n6          32            169       27         166\n\n\n\n\nb\n\nsummary(data)\n\n  age.husband    height.husband     age.wife      height.wife   \n Min.   :20.00   Min.   :155.0   Min.   :18.00   Min.   :141.0  \n 1st Qu.:33.00   1st Qu.:169.0   1st Qu.:32.00   1st Qu.:156.0  \n Median :43.50   Median :172.0   Median :41.00   Median :160.0  \n Mean   :42.92   Mean   :172.8   Mean   :40.68   Mean   :160.3  \n 3rd Qu.:53.00   3rd Qu.:177.0   3rd Qu.:50.00   3rd Qu.:165.0  \n Max.   :64.00   Max.   :190.0   Max.   :64.00   Max.   :176.0  \n\n\nFor each column, we see a brief summary with quantitative and qualitative information about the data.\n\n\nc\n\nage_diff &lt;- data$age.husband - data$age.wife # Calc age difference\n\nboxplot(age_diff)\n\n\n\n\n\n\n\n\n\n\nd\n\nThe median of age_diff is about 2.5. On average, the age difference between husbands and wives is around 2.5 years.\n50% of the differences lie between approximately 0 and 5 years.\nThere are more upper than lower outliers, meaning that extreme cases where the husband is much older than the wife occur more frequently.\nIn addition, the values of the upper outliers are larger than those of the lower ones."
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-2.2",
    "href": "hs25/sa/sa_exercises.html#problem-2.2",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 2.2",
    "text": "Problem 2.2\n\nhead(InsectSprays) # Preview data from head\n\n  count spray\n1    10     A\n2     7     A\n3    20     A\n4    14     A\n5    14     A\n6    12     A\n\n\n\na\n\ntapply(InsectSprays$count, InsectSprays$spray, mean)\n\n        A         B         C         D         E         F \n14.500000 15.333333  2.083333  4.916667  3.500000 16.666667 \n\n\n\n\nb\n\nboxplot(count ~ spray,\n        data = InsectSprays)"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-2.3",
    "href": "hs25/sa/sa_exercises.html#problem-2.3",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 2.3",
    "text": "Problem 2.3\n\ndata &lt;- read.csv('/home/nils/dev/mscids-notes/hs25/sa/data/Diet.csv')\nhead(data)\n\n  Person gender Age Height pre.weight Diet weight6weeks\n1     25     NA  41    171         60    2         60.0\n2     26     NA  32    174        103    2        103.0\n3      1      0  22    159         58    1         54.2\n4      2      0  46    192         60    1         54.0\n5      3      0  55    170         64    1         63.3\n6      4      0  33    171         64    1         61.1\n\n\n\n# Add column weight.los\ndata$weight.loss &lt;- data$weight6weeks - data$pre.weight\ndata$weight.loss\n\n [1]  0.0  0.0 -3.8 -6.0 -0.7 -2.9 -2.8 -2.0 -2.0 -8.5 -1.9 -3.1 -1.5 -3.0 -3.6\n[16] -0.9  2.1 -2.0 -1.7 -4.3 -7.0 -0.6 -2.7 -3.6 -3.0 -2.0 -4.2 -4.7 -3.3  0.5\n[31] -7.0 -5.6 -3.4 -6.8 -7.8 -5.4 -6.8 -7.2 -7.0 -7.3 -0.9 -7.6 -4.1 -6.3 -5.0\n[46]  0.6 -1.1 -4.5 -4.1 -9.0 -2.4 -3.9 -3.5 -5.1 -3.5 -4.2 -2.4 -5.8 -3.5 -5.3\n[61] -1.7 -5.4 -6.1 -7.9  1.4 -4.3 -2.5 -0.9 -3.5 -0.5 -2.8 -8.6 -4.5 -2.8 -4.1\n[76] -5.3 -9.2 -6.1\n\n\n\ntapply(data$weight.loss, data$Diet, mean)\n\n        1         2         3 \n-3.300000 -3.025926 -5.148148 \n\n\nAccording to the data, diet 3 appears to have the greatest effect on weight loss over the 6-week therapy period. Diets 1 and 2 show more or less the same effect, although patients following diet 2 lost slightly less weight on average.\n\nboxplot(data$weight.loss ~ data$Diet)\n\n\n\n\n\n\n\n\n\nEven though diet 3 appears to have the greatest effect according to the median, it also has the largest interquartile range (IQR) among the three diets.\nDiet 2 shows the greatest overall spread across the entire boxplot\nDiet 1 is influenced by several lower outliers."
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-2.4",
    "href": "hs25/sa/sa_exercises.html#problem-2.4",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 2.4",
    "text": "Problem 2.4\n\na\nThe probabilities of ‚Äòheads‚Äô and ‚Äòtails‚Äô do not add up to 1.\n\n\nb\nThe calculated probability is negative. That‚Äôs not possible by definition.\n\n\nc\nThe union of the quantities S and M cannot be 0.7, because men cannot be pregnant."
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-2.5",
    "href": "hs25/sa/sa_exercises.html#problem-2.5",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 2.5",
    "text": "Problem 2.5\n\na\nSample space of the experiment:\n\\[\n\\Omega = \\{ (i, j) \\mid i, j \\in \\{1,2,3,4,5,6\\} \\}\n\\]\n\n\nb\n\\[\np(\\omega_n) = \\dfrac{1}{36} = 0.02\\bar{7}\n\\]\n\n\nc\nEvents, where the sum is 7:\n\\[\nE_1 = {(1, 6), (2, 5), (3, 4)}\n\\]\n\nNote: Since there are two dices, we can multiply the number of favourable results by 2.\n\nNow, we can calculate the probability:\n\\[\np(E_1) = \\dfrac{6}{36} = 0.1\\bar{6}\n\\]\n\n\nd\n\\[\nE_2 = {(1, 1), (1, 2), (2, 1)}\n\\]\n\\[\np(E_2) = \\dfrac{3}{36} = 0.08\\bar{3}\n\\]\n\n\ne\n\\[\nE_3 = \\{ (i, j) \\mid i, j \\in \\{1,3,5\\} \\}\n\\]\n\\[\np(E_3) = \\dfrac{9}{36} = 0.25\n\\]\n\n\nf\n\np_e2 &lt;- 3/36\np_e3 &lt;- 9/36\np_intersection &lt;- 1/36\n\np_annual &lt;- p_e2 + p_e3 - p_intersection\n\nprint(p_annual)\n\n[1] 0.3055556"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-2.6",
    "href": "hs25/sa/sa_exercises.html#problem-2.6",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 2.6",
    "text": "Problem 2.6\n\np_A &lt;- 3/4\np_B &lt;- 2/3\n\n\na\n\np_bothEvents &lt;- p_A * p_B\nprint(p_bothEvents)\n\n[1] 0.5\n\n\n\n\nb\n\np_atLeastOne &lt;- p_A + p_B - p_A * p_B\nprint(p_atLeastOne)\n\n[1] 0.9166667\n\n\n\n\nc\n\np_atMostOne &lt;- 1 - p_A * p_B\n\ncat(p_atMostOne)\n\n0.5\n\n\n\n\nd\n\np_noEvent &lt;- 1 - (p_A + p_B - p_A * p_B)\nprint(p_noEvent)\n\n[1] 0.08333333\n\n\n\n\ne\n\np_exactlyOneEvent &lt;- p_A + p_B - 2 * p_A * p_B\nprint(p_exactlyOneEvent)\n\n[1] 0.4166667"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-2.7",
    "href": "hs25/sa/sa_exercises.html#problem-2.7",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 2.7",
    "text": "Problem 2.7\n\np_earthquake &lt;- 0.04\np_typhoon &lt;- 0.08\n\np_annual &lt;- p_earthquake + p_typhoon - p_earthquake * p_typhoon\n\nprint(p_annual)\n\n[1] 0.1168"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-3.1",
    "href": "hs25/sa/sa_exercises.html#problem-3.1",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 3.1",
    "text": "Problem 3.1\n\\[\np_2 = 1 - 0.3 - 0.1 - 0.2 - 0.3 = 0.1\n\\]"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-3.2",
    "href": "hs25/sa/sa_exercises.html#problem-3.2",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 3.2",
    "text": "Problem 3.2\n\na\nThe probabilities in the table sum to one, so it is a probability distribution.\n\\[\n\\sum P(X = k) = 1\n\\]\n\n\nb\n\\[\np(2 \\le k \\le 4) = 0.2 + 0.2 + 0.1 = 0.5\n\\]\n\n\nc\n\\[\np(k \\gt 2) = 0.2 + 0.1 + 0.1 = 0.4\n\\]\n\n\nd\n\\[\np(k \\le 4) = 1 - 0.1 = 0.9\n\\]\n\n\ne\n\\[\np(k \\gt 1) = 1 - 0.4 = 0.6\n\\]"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-3.3",
    "href": "hs25/sa/sa_exercises.html#problem-3.3",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 3.3",
    "text": "Problem 3.3\n\na\n\\[\np(k \\le 13) = 0.992\n\\]\n\n\nb\n\\[\np(k \\ge 10) = 1 - 0.939 = 0.061\n\\]\n\n\nc\n\\[\np(k = 15) = 1 - 0.999 = 0.001\n\\]\n\n\nd\n\\[\np(9 \\le k \\le 12) = 0.989 - 0.711 = 0.282\n\\]"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-3.4",
    "href": "hs25/sa/sa_exercises.html#problem-3.4",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 3.4",
    "text": "Problem 3.4\n\na\n\\[\n\\Omega = \\{\\text{TTT}, \\text{TTH}, \\text{THT}, \\text{HTT}, \\text{THH}, \\text{HTH}, \\text{HHT}, \\text{HHH}\\}\n\\] \\[\nP(X = 0) = \\frac{1}{8}\n\\] \\[\nP(X = 1) = \\frac{3}{8}\n\\] \\[\nP(X = 2) = \\frac{3}{8}\n\\] \\[\nP(X = 3) = \\frac{1}{8}\n\\]\n\n\nb\n\\[\np(x = 2) = \\frac{3}{8}\n\\]\n\n\nc\n\\[\np(X \\ge 2) = \\frac{3}{8} + \\frac{1}{8} = \\frac{1}{2}\n\\]\n\n\nd\n\\[\np(X \\le 1) = \\frac{1}{8} + \\frac{3}{8} = \\frac{1}{2}\n\\]"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-3.5",
    "href": "hs25/sa/sa_exercises.html#problem-3.5",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 3.5",
    "text": "Problem 3.5\n\nx_k &lt;- c(-5, -4, 1, 3, 6)\np &lt;- c(0.3, 0.1, 0.2, 0.3)\np_k &lt;- 1 - sum(p) # Calc p_k\ncat(\"Probability of -4 =\", p_k, \"\\n\")\n\nProbability of -4 = 0.1 \n\np &lt;- c(0.3, p_k, 0.1, 0.2, 0.3) # Reassign p\n\nmu &lt;- sum(x_k * p) # Calc expected value\nmu\n\n[1] 0.6"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-3.6",
    "href": "hs25/sa/sa_exercises.html#problem-3.6",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 3.6",
    "text": "Problem 3.6\n\na\n\\[\np(x) = \\frac{1}{6} + \\frac{1}{6} = \\frac{1}{3}\n\\]\n\n\nb\n\nx &lt;- 2:12 # Sum of eyes\np &lt;- c(1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1) / 36 # Probability of summed eyes\n\nmu = sum(x * p)\nmu\n\n[1] 7\n\nvar = sum((x - mu)**2 * p)\nvar\n\n[1] 5.833333\n\nsd = sqrt(var)\nsd\n\n[1] 2.415229"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-4.2",
    "href": "hs25/sa/sa_exercises.html#problem-4.2",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 4.2",
    "text": "Problem 4.2\n\n# Define distr. paras\nmu &lt;- 4\nsd &lt;- 1.25\n\n\na\n\n# Assume normal distr.\npnorm(q = 2.5, mean = mu, sd = sd)\n\n[1] 0.1150697\n\n\n\n\nb\n\n1 - pnorm(q = 5.0, mean = mu, sd = sd)\n\n[1] 0.2118554\n\n\n\n\nc\n\npnorm(q = 4.5, mean = mu, sd = sd) - pnorm(q = 3.0, mean = mu, sd = sd)\n\n[1] 0.4435663\n\n\n\n\nd\n\nqnorm(0.98, mean=mu, sd=sd)\n\n[1] 6.567186"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-4.3",
    "href": "hs25/sa/sa_exercises.html#problem-4.3",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 4.3",
    "text": "Problem 4.3\n\n# Define distr. paras\nmu &lt;- 2.2\nsd &lt;- 0.3\n\n# Assume normal distr.\n1 - pnorm(q=3.1, mean=mu, sd=sd/sqrt(100))\n\n[1] 0"
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-4.4",
    "href": "hs25/sa/sa_exercises.html#problem-4.4",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 4.4",
    "text": "Problem 4.4\n\n# Define distr. paras\nmu &lt;- 8.2\nsd &lt;- 6.0\n\n\na\n\n# Assume normal distr.\npnorm(q=10.0, mean=mu, sd=sd/sqrt(36))\n\n[1] 0.9640697\n\n\n\n\nb\n\npnorm(q=10.0, mean=mu, sd=sd/sqrt(36)) - pnorm(q=5.0, mean=mu, sd=sd/sqrt(36))\n\n[1] 0.9633825\n\n\n\n\nc\n\n1- pnorm(q=20.0, mean=mu, sd=sd/sqrt(36))\n\n[1] 0\n\n\n\n\nd\nIt‚Äôs small, but not impossible. We also assume a normal distribution. The real distribution probability may differ from the normal distribution. We also use a very small sample size of 36.\n\n\ne\nYes, the i.i.d. assumption holds here because each of the 36 passengers is an individual who is independent of the others."
  },
  {
    "objectID": "hs25/sa/sa_exercises.html#problem-4.5",
    "href": "hs25/sa/sa_exercises.html#problem-4.5",
    "title": "Classical and Bayesian Statistics - Exercises",
    "section": "Problem 4.5",
    "text": "Problem 4.5\n\n# Define distr. paras\nmu &lt;- 77\nsd &lt;- 15\n\ncourse_1 &lt;- 25\ncourse_2 &lt;- 64\n\n\na\n\n# Assume normal distr.\npnorm(q=82, mean=mu, sd=sd/sqrt(course_1)) - pnorm(q=72, mean=mu, sd=sd/sqrt(course_1))\n\n[1] 0.9044193\n\n\n\n\nb\n\npnorm(q=82, mean=mu, sd=sd/sqrt(course_2)) - pnorm(q=72, mean=mu, sd=sd/sqrt(course_2))\n\n[1] 0.9923392\n\n\nFor a larger group, the probability is more likely to be at the mean compared to a smaller group (CLT)."
  },
  {
    "objectID": "hs25/pds/pds_exercises.html",
    "href": "hs25/pds/pds_exercises.html",
    "title": "Python for Data Science - Exercises",
    "section": "",
    "text": "print(f\"10 + 10 + 10 = {10 + 10 + 10}\")\nprint(f\"10 - 3       = {10 - 3}\")\nprint(f\"10 * 2       = {10 * 2}\")\nprint(f\"5 / 2        = {5 / 2}\")\nprint(f\"5.0 / 2      = {5.0 / 2}\")\nprint(f\"5 % 2        = {5 % 2}\")\nprint(f\"10 % 3       = {10 % 3}\")\nprint(f\"3 ** 3       = {3 ** 3}\")\nprint(f\"9 ** 0.5     = {9 ** 0.5}\")\nprint(f\"10 + 3 * 3   = {10 + 3 * 3}\")\nprint(f\"(10 + 3) * 3 = {(10 + 3) * 3}\")\n\n10 + 10 + 10 = 30\n10 - 3       = 7\n10 * 2       = 20\n5 / 2        = 2.5\n5.0 / 2      = 2.5\n5 % 2        = 1\n10 % 3       = 1\n3 ** 3       = 27\n9 ** 0.5     = 3.0\n10 + 3 * 3   = 19\n(10 + 3) * 3 = 39\n\n\n\n\n\n\na = 23\nb = 23\nprint(f\"a = {a}\")\nprint(f\"The ID of a is {id(a)}\") # Prints memory address of the variable a\nprint(f\"a is of type {type(a)}\") # Prints the data type of the variable a\n\na = 23\nThe ID of a is 11761384\na is of type &lt;class 'int'&gt;\n\n\n\nNote: id() corresponds to the objects memory address during its lifetime.\n\n\nprint(f\"b = {b}\")\nprint(f\"The ID of b is {id(b)}\")\nprint(f\"b is of type {type(a)}\")\n\nb = 23\nThe ID of b is 11761384\nb is of type &lt;class 'int'&gt;\n\n\n\n\n\n\na = 123 # Reassign var a to int 123\nprint(f\"a = {a}\")\nprint(f\"The ID of a is {id(a)}\")\nprint(f\"a is of type {type(a)}\")\n\na = 123\nThe ID of a is 11764584\na is of type &lt;class 'int'&gt;\n\n\n\n\n\n\nc = 23\nprint(f\"c = {c}\")\nprint(f\"The ID of a is {id(c)}\")\nprint(f\"c is of type {type(c)}\")\n\nc = 23\nThe ID of a is 11761384\nc is of type &lt;class 'int'&gt;\n\n\nWe assign the variable c to the value 23 and check its data type and memory location.\n\n\n\n\nd = 3.142\nprint(f\"d = {d}\")\nprint(f\"The ID of a is {id(d)}\")\nprint(f\"d is of type {type(d)}\")\n\nd = 3.142\nThe ID of a is 133970252471440\nd is of type &lt;class 'float'&gt;\n\n\n\n\n\n\nprint (\"HSLU's Python course is cool\")\n\nprint(\"This is Line 1\")\nprint(\"This is Line 2\")\n\nprint(\"\\nWhat does the \\\\n control character do? Are you sure?\") # \\n is a line break\n\nprint(\"\\tWhat does the \\\\t control character do? Are you sure?\") # \\t is a tabulator\n\nprint(\"I want to learn python because....\")\nprint(\"\\n\\n\\t....it's a cool data science programming language. Ok - there are also others ;-) !\")\n\nprint(\"What \" + \"is \" + \"wrong?\" + \"\\nAdd some space between the words without removing the '+' signs!\") # Add spaces after the string\n\nHSLU's Python course is cool\nThis is Line 1\nThis is Line 2\n\nWhat does the \\n control character do? Are you sure?\n    What does the \\t control character do? Are you sure?\nI want to learn python because....\n\n\n    ....it's a cool data science programming language. Ok - there are also others ;-) !\nWhat is wrong?\nAdd some space between the words without removing the '+' signs!\n\n\n\n\n\n\ng=h='hslu'      # Assign the var g and h to the string \"hslu\"\nprint(g)        # Prints hslu\nprint(h)        # Print hslu\nh=456           # Reassign h to int 456\nprint(h)        # Prints 456\nh=h+1           # Calculates 456 + 1 = 457\nprint(h)        # Prints 457\nh+=1            # Calculates 457 + 1 = 458\nprint(h)        # Prints 458\np='hslu'        # Assign the var p to the string \"hslu\"\nq=p             # Copies the var p (hlsu) to the var q\nprint(p==q)     # Compare the var p and q (Output: True)\nprint(p is q)   # Compare the var p and q (Output: True)\n\nhslu\nhslu\n456\n457\n458\nTrue\nTrue"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#exercises-1",
    "href": "hs25/pds/pds_exercises.html#exercises-1",
    "title": "Python for Data Science - Exercises",
    "section": "",
    "text": "print(f\"10 + 10 + 10 = {10 + 10 + 10}\")\nprint(f\"10 - 3       = {10 - 3}\")\nprint(f\"10 * 2       = {10 * 2}\")\nprint(f\"5 / 2        = {5 / 2}\")\nprint(f\"5.0 / 2      = {5.0 / 2}\")\nprint(f\"5 % 2        = {5 % 2}\")\nprint(f\"10 % 3       = {10 % 3}\")\nprint(f\"3 ** 3       = {3 ** 3}\")\nprint(f\"9 ** 0.5     = {9 ** 0.5}\")\nprint(f\"10 + 3 * 3   = {10 + 3 * 3}\")\nprint(f\"(10 + 3) * 3 = {(10 + 3) * 3}\")\n\n10 + 10 + 10 = 30\n10 - 3       = 7\n10 * 2       = 20\n5 / 2        = 2.5\n5.0 / 2      = 2.5\n5 % 2        = 1\n10 % 3       = 1\n3 ** 3       = 27\n9 ** 0.5     = 3.0\n10 + 3 * 3   = 19\n(10 + 3) * 3 = 39\n\n\n\n\n\n\na = 23\nb = 23\nprint(f\"a = {a}\")\nprint(f\"The ID of a is {id(a)}\") # Prints memory address of the variable a\nprint(f\"a is of type {type(a)}\") # Prints the data type of the variable a\n\na = 23\nThe ID of a is 11761384\na is of type &lt;class 'int'&gt;\n\n\n\nNote: id() corresponds to the objects memory address during its lifetime.\n\n\nprint(f\"b = {b}\")\nprint(f\"The ID of b is {id(b)}\")\nprint(f\"b is of type {type(a)}\")\n\nb = 23\nThe ID of b is 11761384\nb is of type &lt;class 'int'&gt;\n\n\n\n\n\n\na = 123 # Reassign var a to int 123\nprint(f\"a = {a}\")\nprint(f\"The ID of a is {id(a)}\")\nprint(f\"a is of type {type(a)}\")\n\na = 123\nThe ID of a is 11764584\na is of type &lt;class 'int'&gt;\n\n\n\n\n\n\nc = 23\nprint(f\"c = {c}\")\nprint(f\"The ID of a is {id(c)}\")\nprint(f\"c is of type {type(c)}\")\n\nc = 23\nThe ID of a is 11761384\nc is of type &lt;class 'int'&gt;\n\n\nWe assign the variable c to the value 23 and check its data type and memory location.\n\n\n\n\nd = 3.142\nprint(f\"d = {d}\")\nprint(f\"The ID of a is {id(d)}\")\nprint(f\"d is of type {type(d)}\")\n\nd = 3.142\nThe ID of a is 133970252471440\nd is of type &lt;class 'float'&gt;\n\n\n\n\n\n\nprint (\"HSLU's Python course is cool\")\n\nprint(\"This is Line 1\")\nprint(\"This is Line 2\")\n\nprint(\"\\nWhat does the \\\\n control character do? Are you sure?\") # \\n is a line break\n\nprint(\"\\tWhat does the \\\\t control character do? Are you sure?\") # \\t is a tabulator\n\nprint(\"I want to learn python because....\")\nprint(\"\\n\\n\\t....it's a cool data science programming language. Ok - there are also others ;-) !\")\n\nprint(\"What \" + \"is \" + \"wrong?\" + \"\\nAdd some space between the words without removing the '+' signs!\") # Add spaces after the string\n\nHSLU's Python course is cool\nThis is Line 1\nThis is Line 2\n\nWhat does the \\n control character do? Are you sure?\n    What does the \\t control character do? Are you sure?\nI want to learn python because....\n\n\n    ....it's a cool data science programming language. Ok - there are also others ;-) !\nWhat is wrong?\nAdd some space between the words without removing the '+' signs!\n\n\n\n\n\n\ng=h='hslu'      # Assign the var g and h to the string \"hslu\"\nprint(g)        # Prints hslu\nprint(h)        # Print hslu\nh=456           # Reassign h to int 456\nprint(h)        # Prints 456\nh=h+1           # Calculates 456 + 1 = 457\nprint(h)        # Prints 457\nh+=1            # Calculates 457 + 1 = 458\nprint(h)        # Prints 458\np='hslu'        # Assign the var p to the string \"hslu\"\nq=p             # Copies the var p (hlsu) to the var q\nprint(p==q)     # Compare the var p and q (Output: True)\nprint(p is q)   # Compare the var p and q (Output: True)\n\nhslu\nhslu\n456\n457\n458\nTrue\nTrue"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#task-1",
    "href": "hs25/pds/pds_exercises.html#task-1",
    "title": "Python for Data Science - Exercises",
    "section": "Task 1",
    "text": "Task 1\nCreate a simple program in which three whole numbers (potentially negative!) are read in from the keyboard and afterwards get displayed on the screen in ascending order. Use nested if-statements for order determination (i.e.¬†no built-in- ‚Äòsort‚Äô function).\n\nUsing if-else-statements\n\ninputs = [] # Set up storage\n\nprint(\"Please input 3 whole numbers of your choise.\")\n\"\"\"\ninput1 = int(input(\"Number one: \")) # Assign input to a variable\ninput2 = int(input(\"Number two: \"))\ninput3 = int(input(\"Number tree: \"))\n\"\"\"\n\n# Use fake user inputs\ninput1 = -3\ninput2 = 10\ninput3 = -6\n\n# Sort list\nif input1 &lt; input2 and input1 &lt; input3:\n    inputs.append(input1) # Append input to list\n    if input2 &lt; input3:\n        inputs.append(input2)\n        inputs.append(input3)\n    else:\n        inputs.append(input3)\n        inputs.append(input2)\nelif input2 &lt; input1 and input2 &lt; input3:\n    inputs.append(input2)\n    if input1 &lt; input3:\n        inputs.append(input1)\n        inputs.append(input3)\n    else:\n        inputs.append(input3)\n        inputs.append(input1)\nelif input3 &lt; input1 and input3 &lt; input2:\n    inputs.append(input3)\n    if input1 &lt; input2:\n        inputs.append(input1)\n        inputs.append(input2)\n    else:\n        inputs.append(input2)\n        inputs.append(input1)\n\nprint(inputs)\n\nPlease input 3 whole numbers of your choise.\n[-6, -3, 10]\n\n\n\n\nUsing build in function sorted()\n\ninputs = [] # Set up storage\n\nprint(\"Please input 3 whole numbers of your choise.\")\n\"\"\"\ninput1 = int(input(\"Number one: \")) # Assign input to a variable\ninputs.append(input1)\ninput2 = int(input(\"Number two: \"))\ninputs.append(input2)\ninput3 = int(input(\"Number tree: \"))\ninputs.append(input3)\n\"\"\"\n\n# Use fake user inputs\ninput1 = -3\ninputs.append(input1)\ninput2 = 10\ninputs.append(input2)\ninput3 = -6\ninputs.append(input3)\n\n# Sort list\ninputs = sorted(inputs)\nprint(inputs)\n\nPlease input 3 whole numbers of your choise.\n[-6, -3, 10]"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#task-2",
    "href": "hs25/pds/pds_exercises.html#task-2",
    "title": "Python for Data Science - Exercises",
    "section": "Task 2",
    "text": "Task 2\n\na\nAssumption: The int variables a, b and c are declared and initialized.\nDefine a conditional expression ‚ÄúEXPR‚Äù in such a way that the body of the expression\nif EXPR: print(‚Äúcondition fulfilled‚Äù)\nis only carried out if: a is greater than b OR a is less than half of b OR the sum of a and c is greater than b.\nCheck your result: a=1, b=2, c=2 -&gt; True a=1, b=2, c=1 -&gt; False\n\n# Test case one\na = 1\nb = 2\nc = 2\n\nif a &gt; b or a &lt; b/2 or sum([a, c]) &gt; b:\n    print(\"condition fulfilled\")\nelse:\n    print(\"condition not fulfilled\")\n\ncondition fulfilled\n\n\n\n# Test case two\na = 1\nb = 2\nc = 1\n\nif a &gt; b or a &lt; b/2 or sum([a, c]) &gt; b:\n    print(\"condition fulfilled\")\nelse:\n    print(\"condition not fulfilled\")\n\ncondition not fulfilled\n\n\n\n\nb\nAssumption: The int variables a, b and c are declared and initialized.\nDefine a conditional expression ‚ÄúEXPR‚Äù in such a way that the body of the expression\nif EXPR: print(‚Äúcondition fulfilled‚Äù)\nis only carried out if: half of the number a is an odd number OR the subtraction of the numbers b and c results in an even number OR both a and b and also b and c have different values.\nCheck your result: a=6, b=2, c=0 =&gt; True a=5, b=2, c=1 =&gt; True a=5, b=5, c=2 =&gt; False\n\n# Test case one\na = 6\nb = 2\nc = 0\n\nif a/2 % 2 == 1 or b - c % 2 == 0 or a != b and b != c:\n        print(\"condition fulfilled\")\nelse:\n    print(\"condition not fulfilled\")\n\ncondition fulfilled\n\n\n\n# Test case two\n# Test case one\na = 5\nb = 2\nc = 1\n\nif a/2 % 2 == 1 or b - c % 2 == 0 or a != b and b != c:\n        print(\"condition fulfilled\")\nelse:\n    print(\"condition not fulfilled\")\n\ncondition fulfilled\n\n\n\n# Test case three\n# Test case one\na = 5\nb = 5\nc = 2\n\nif a/2 % 2 == 1 or b - c % 2 == 0 or a != b and b != c:\n        print(\"condition fulfilled\")\nelse:\n    print(\"condition not fulfilled\")\n\ncondition not fulfilled"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#exercise-1",
    "href": "hs25/pds/pds_exercises.html#exercise-1",
    "title": "Python for Data Science - Exercises",
    "section": "Exercise 1",
    "text": "Exercise 1\nWrite a python program that constructs the following pattern using a nested for loop:\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\nupper  = range(0, 6, 1) # Define upper pattern\nlower = range(6, 0, -1) # Define lower pattern\n\n\nfor i in upper:\n    print(\"*\" * i) # Print upper part of pattern\nelse: # After done\n    for j in lower:\n        print(\"*\" * j) # Print lower part of pattern\n\n\n*\n**\n***\n****\n*****\n******\n*****\n****\n***\n**\n*"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#exercise-2",
    "href": "hs25/pds/pds_exercises.html#exercise-2",
    "title": "Python for Data Science - Exercises",
    "section": "Exercise 2",
    "text": "Exercise 2\nWrite a python program to count the number of even and odd numbers contained in a sequence of numbers.\n\neven_numbers = []\nodd_numbers = []\nnumbers = (1,2,3,4,5,6,7,8,9,10)\n\nfor i in range(len(numbers)):\n    if i % 2 == 0: # Check if current number is even\n        even_numbers.append(i)\n    else:\n        odd_numbers.append(i)\n\nprint(f\"Total number of even numbers: {len(even_numbers)}\") # Use len() to count\nprint(f\"Total number of even numbers: {len(odd_numbers)}\")\n\nTotal number of even numbers: 5\nTotal number of even numbers: 5"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#exercise-3",
    "href": "hs25/pds/pds_exercises.html#exercise-3",
    "title": "Python for Data Science - Exercises",
    "section": "Exercise 3",
    "text": "Exercise 3\nWrite a Python program which takes two digits m (row) and n (column) as input and generates a two-dimensional structure (e.g.¬†nested list). The value in the i-th row and j-th column should be i*j.\n\nrows = 3\ncolumns = 4\nresult = [] # Define master list\n\nfor row in range(rows):\n    sub_list = [] # Define sub-list\n    for column in range(columns):\n        sub_list.append(row * column) # Calc value\n    result.append(sub_list) # Append sub-list to master list\n\nprint(result)\n\n[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#exercise-4",
    "href": "hs25/pds/pds_exercises.html#exercise-4",
    "title": "Python for Data Science - Exercises",
    "section": "Exercise 4",
    "text": "Exercise 4\nWrite a Python program to find all numbers between 200 and 500 (limits included) only containing even digits. Correct solution:\n\nmy_range = range(200, 501) # Include boarders\neven_digit_numbers = [] # Final result\n\nfor number in my_range: \n    test_result = []\n    for digit in str(number):\n        if int(digit) % 2 == 1:\n            test_result.append(True) # Add true for odd digit\n        else:\n            test_result.append(False) # Add false for even digit\n    if any(test_result):\n        pass # Pass if any odd digit (false) is in test_result\n    else:\n        even_digit_numbers.append(number) # Append to final result\n\nprint(even_digit_numbers)\n\n[200, 202, 204, 206, 208, 220, 222, 224, 226, 228, 240, 242, 244, 246, 248, 260, 262, 264, 266, 268, 280, 282, 284, 286, 288, 400, 402, 404, 406, 408, 420, 422, 424, 426, 428, 440, 442, 444, 446, 448, 460, 462, 464, 466, 468, 480, 482, 484, 486, 488]"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#exercise-5",
    "href": "hs25/pds/pds_exercises.html#exercise-5",
    "title": "Python for Data Science - Exercises",
    "section": "Exercise 5",
    "text": "Exercise 5\nWrite a Python program to guess a number between 1 to 10. First: Use the predefined code block to create a random number Second: The user is prompted to enter a guess. If the guess is wrong a message ‚Äúto big‚Äù or ‚Äúto small‚Äù is printed to the console and the prompt (user input) appears again until the guess is correct. If the guess is correct, ‚ÄúWell guessed!‚Äù will be printed and the program ends. Extension: The number of trials should be prompted as well: ‚ÄúWell done - you have tried it 4 times!‚Äù\n\n# Code block to create a random number\nfrom random import randint\nrandom_number = randint(1,10)\n# End code block to create a random number\n\ntrials = 0\n\nwhile True: # Infinitive loop till break\n    # Unsing fake user input\n    user_input = randint(1,10) # Also random\n    trials += 1 # Count trials\n    if user_input == random_number:\n        print(f\"Well done - you have tried it {trials} times!\")\n        break\n    elif user_input &lt; random_number:\n        print(\"Guess to low...\")\n    else:\n        print(\"Guess to high...\")\n\nGuess to high...\nGuess to high...\nGuess to high...\nGuess to high...\nGuess to high...\nGuess to high...\nGuess to high...\nWell done - you have tried it 8 times!"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#exercise-6",
    "href": "hs25/pds/pds_exercises.html#exercise-6",
    "title": "Python for Data Science - Exercises",
    "section": "Exercise 6",
    "text": "Exercise 6\nSuppose we wish to draw a Christmas tree. Example tree - desired height: 8 The result looks like:\n     x\n    xxx\n   xxxxx\n  xxxxxxx\n xxxxxxxxx\nxxxxxxxxxxx\n    xxx\n    xxx\nCreate a program that asks the user for the height of the Christmas tree (trunk included) and then draws the tree. The height of the trunk is always 2 and the width is 3 in case the entire height is &gt; 5 and 1 in case the tree is smaller.\n\ntotal_height = 8\ntrunk_height = 2\ncrown_height = total_height - trunk_height\nmax_crown_width = 2 * (crown_height - 1) + 1\n\nif total_height &gt; 5:\n    trunk_width = 3\nelse:\n    trunk_width = 1\n\ni = 0\nwhile i &lt; crown_height:\n    current_crown_width = 2 * i + 1\n    spaces = (max_crown_width - current_crown_width) // 2\n    print(\" \" * spaces + \"x\" * current_crown_width)\n    i += 1\n\ntrunk_padding = (max_crown_width - trunk_width) // 2\n\nj = 0\nwhile j &lt; trunk_height:\n    print(\" \" * trunk_padding + \"x\" * trunk_width)\n    j += 1\n\n     x\n    xxx\n   xxxxx\n  xxxxxxx\n xxxxxxxxx\nxxxxxxxxxxx\n    xxx\n    xxx"
  },
  {
    "objectID": "hs25/pds/pds_exercises.html#exercise-1-1",
    "href": "hs25/pds/pds_exercises.html#exercise-1-1",
    "title": "Python for Data Science - Exercises",
    "section": "Exercise 1",
    "text": "Exercise 1\nWrite a Python program to guess a number between 1 to 10. First: Use the predefined code block to create a random number Second: The user is prompted to enter a guess. If the guess is wrong a message ‚Äúto big‚Äù or ‚Äúto small‚Äù is printed to the console and the prompt (user input) appears again until the guess is correct. If the guess is correct, ‚ÄúWell guessed!‚Äù will be printed and the program ends. Extension: The number of trials should be prompted as well: ‚ÄúWell done - you have tried it 4 times!‚Äù\n\n# Code block to create a random number\nfrom random import randint\nrandom_number = randint(1,10)\n# End code block to create a random number\n\ntrials = 0\n\nwhile True: # Infinitive loop till break\n    # Unsing fake user input\n    user_input = randint(1,10) # Also random\n    trials += 1 # Count trials\n    if user_input == random_number:\n        print(f\"Well done - you have tried it {trials} times!\")\n        break\n    elif user_input &lt; random_number:\n        print(\"Guess to low...\")\n    else:\n        print(\"Guess to high...\")\n\nGuess to high...\nGuess to low...\nGuess to low...\nWell done - you have tried it 4 times!"
  },
  {
    "objectID": "hs25/doe/doe_notes.html",
    "href": "hs25/doe/doe_notes.html",
    "title": "Design of Experiments",
    "section": "",
    "text": "The fundamental difference between observational studies and experimental research designs is that in the former, researchers simply observe and measure variables without actively intervening. In the latter, variables are purposefully manipulated to determine a cause-and-effect relationship.\n\n\n\nThe effect and aim of randomisation is to eliminate selection bias and confounding factors, and to ensure comparability between groups at the start of the study (baseline data).\n\n\n\nConfounding occurs when a factor (confounder) that has not been investigated is associated with both the independent and dependent variables, causing a spurious correlation between them.\n\n\n\nThe problem is distortion due to knowledge about the treatment. Blinding is a suitable technique for avoiding such distortions. It eliminates conscious and unconscious influences on the treatment result.\n\n\n\nOpen: No blining\nSingle-blind: Participants don‚Äôt know their group assignment (e.g., whether they‚Äôre receiving the real treatment or a placebo).\nDouble-blind: Neither the participants nor the researchers administering the treatment know the group assignments.\nTriple-blind: Participants, researchers, and the data analysts are all unaware of the group assignments."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#observational-vs.-experimental",
    "href": "hs25/doe/doe_notes.html#observational-vs.-experimental",
    "title": "Design of Experiments",
    "section": "",
    "text": "The fundamental difference between observational studies and experimental research designs is that in the former, researchers simply observe and measure variables without actively intervening. In the latter, variables are purposefully manipulated to determine a cause-and-effect relationship."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#randomization",
    "href": "hs25/doe/doe_notes.html#randomization",
    "title": "Design of Experiments",
    "section": "",
    "text": "The effect and aim of randomisation is to eliminate selection bias and confounding factors, and to ensure comparability between groups at the start of the study (baseline data)."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#confounder",
    "href": "hs25/doe/doe_notes.html#confounder",
    "title": "Design of Experiments",
    "section": "",
    "text": "Confounding occurs when a factor (confounder) that has not been investigated is associated with both the independent and dependent variables, causing a spurious correlation between them."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#blinding",
    "href": "hs25/doe/doe_notes.html#blinding",
    "title": "Design of Experiments",
    "section": "",
    "text": "The problem is distortion due to knowledge about the treatment. Blinding is a suitable technique for avoiding such distortions. It eliminates conscious and unconscious influences on the treatment result.\n\n\n\nOpen: No blining\nSingle-blind: Participants don‚Äôt know their group assignment (e.g., whether they‚Äôre receiving the real treatment or a placebo).\nDouble-blind: Neither the participants nor the researchers administering the treatment know the group assignments.\nTriple-blind: Participants, researchers, and the data analysts are all unaware of the group assignments."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#introduction-to-scientific-theory",
    "href": "hs25/doe/doe_notes.html#introduction-to-scientific-theory",
    "title": "Design of Experiments",
    "section": "Introduction to scientific theory",
    "text": "Introduction to scientific theory\n\nScientific Theory\nExamines whether and how scientific knowledge can be obtained. It is a branch of philosophy that deals with the theory of scientific knowledge and scientific methods, as well as with research. It also analyzes the practices that generate scientific knowledge and examines the institutional and social contexts in which these take place.\n\n\nMethodology\nIt focuses on the underlying considerations, decisions, and justifications of the approach used in scientific research projects. It provides the instructional framework on how to proceed in order to gain scientific knowledge. It does not comprise a strictly formal set of rules but offers a diverse and pragmatic set of choices that are linked to human action.\n\n\nResearch Methodes\nSystematized procedures and approaches for obtaining knowledge.\n\n\nSelection of positions held in scientific theory\n\nClassical rationalism: Reason precedes experience and there are so-called ‚Äúinnate‚Äù concepts of reason.\nInductive empiricism: Findings are derived inductively based on observations and experiences.\nLogical positivism: The use of logic makes it possible to separate science from metaphysics.\nCritical rationalism: Findings are derived deductively based on observations.\n(Social) constructivism: Individuals construct their reality by relating their thinking and actions.\n\n\nNote: Inductive empiricism and critical rationalism belong to empirical research.\n\n\n\nWhat is empirical research?\nKnowledge can be gained only through observation, experiment, and experience. Empirical research examines the environment by means of observation and experiment. There are many research methods for conducting observations and experiments:\n\nInterview\nCase study\nSurvey study\nExperiment\n\n\n\nLandscape of empirical research\n\n\n\nLandscape of empirical research\n\n\n\n\nQuantitative Methodes\nResearch that uses quantitative methods is designed around the principles of critical rationalism. The approach assumes that a theory can never be finally verified, it can only be falsified.\n\n\nDescriptive statistics\n\nDescribes the data to be analyzed.\nIs limited to a sample as a subset of the population.\nDoes not allow for conclusions to be drawn about the population.\n\n\n\nInferential statistics\n\nFor drawing conclusions about the population based on information obtained from a sample.\nUse statistical hypothesis tests, especially, as the main component.\n\n\n\nHypothesis Testing\nHypothesis testing is a statistical method used to determine if there is enough evidence in a sample of data to support a specific hypothesis about a population. It involves formulating a null hypothesis and an alternative hypothesis, analyzing sample data, and making a decision based on the results, often using a p-value to assess significance.\n\nAlternative hypothesis (\\(H_A\\)): Research hypothesis to be tested that postulates the presence of a certain effect (e.g.¬†a difference) in the population.\nNull hypothesis (\\(H_0\\)): Postulates the opposite, namely the absence of an effect."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#research-process",
    "href": "hs25/doe/doe_notes.html#research-process",
    "title": "Design of Experiments",
    "section": "Research process",
    "text": "Research process\n\nPhases\n\nFormulation of the research problem & study design\nPlanning and preparation of the study\nData collection\nData Analysis\nReporting\n\n\n\nMeasuring Instrument\nA process that uses a given set of circumstances to define and specify subsequent research steps with a view to better understanding these circumstances.\n\n\nSampling procedure\nA selection of cases derived from the population and compiled for research purposes results in statements as part of an empirical study. Sampling often involves people, but objects of all kinds (e.g., websites, newspaper articles, companies, countries) can also form a population. Sample surveys are typical of empirical social research. Only rarely are censuses used that examine all cases associated with the population."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#definition-properties-of-study-design",
    "href": "hs25/doe/doe_notes.html#definition-properties-of-study-design",
    "title": "Design of Experiments",
    "section": "Definition & properties of study design",
    "text": "Definition & properties of study design\nThe choice of a suitable research design determines the scientific quality of a study. The planning of the analysis depends on the research design.\n\nStudy types\n\nDescriptive study: Descriptive character. Suitable for forming hypotheses (Surveys).\nAnalytical study: Identification and quantification of effects / verification of relationships. Not fully suitable for hypothesis testing (Cohot).\nRandomized controlled: Suitable for hypothesis testing (RCT)."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#cause-and-effect",
    "href": "hs25/doe/doe_notes.html#cause-and-effect",
    "title": "Design of Experiments",
    "section": "Cause and Effect",
    "text": "Cause and Effect\nA trial / experiment is carried out to discover a cause-and-effect relationship in a process.\n\nTerms\n\nInput: Trial objects, test objects, test persons, ect.\nProcess: Process in which controllable and non-controllable factors influence the input.\nOutput (aka. Dependet variable: DV): Input changed by the process, result of the test/experiment.\nControllable factors (aka Independet variables: IV): Influencing factors whose strength can be adjusted within defined limits.\nNon-controllable factors: Influencing factors whose strength cannot be determined but that can be measured / cannot be determined and that cannot be measured."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#non-controllable-factors",
    "href": "hs25/doe/doe_notes.html#non-controllable-factors",
    "title": "Design of Experiments",
    "section": "Non-controllable factors",
    "text": "Non-controllable factors\nNon-controllable factors are also referred to as nuisance variables in a general context or nuisance factors in the context of blocking\n\nNote: Blocking = arranging of experimental units in groups (blocks)"
  },
  {
    "objectID": "hs25/doe/doe_notes.html#causality-in-observational-and-experimental-study-designs",
    "href": "hs25/doe/doe_notes.html#causality-in-observational-and-experimental-study-designs",
    "title": "Design of Experiments",
    "section": "Causality in observational and experimental study designs",
    "text": "Causality in observational and experimental study designs\nObservational studies cannot directly prove causality, but only show correlations or associations. Since the assignment is not random, there is always a risk that the results are distorted by unknown confounding factors.\nExperimental studies (e.g.¬†RCTs) can prove causality because they control for confounding factors through randomisation, thereby isolating the effect of the cause. They are the gold standard."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#variance",
    "href": "hs25/doe/doe_notes.html#variance",
    "title": "Design of Experiments",
    "section": "Variance",
    "text": "Variance\nThe variance describes the mean square deviation of the individual measured values from the empirical mean.\n\nPrimary variance: Impact of (experimental) factors in an experiment on the change / variation of the output to be examined.\nSecondary variance: Variation of the output to be examined, caused by nuisance variables. Not in the focus of the study.\nError variance: Variation caused by measurement errors and random processes.\n\n\nNote: Secondary and error variances are grouped to the residual variance.\n\n\nVariantion of Variance\nThe variance of the dependent variable (DV) (primary variance) should be attributed to the systematic variation of the independent variable (IV). The secondary variance should be controlled and the error variance minimized.\n\n\n\nSummary Variance\n\n\n\nMaximizing the primary variance\n\nRelationship is linear: Selecting of extreme values in the IV.\nRelationship were curvilinear: Selecting optimal increments of IV.\nRelationship were unknown: Selecting as many increments of IV in the smallest steps as possible.\n\n\n\nControl of the secondary variance\n\nKeeping constant: Keeping the experimental setup constant.\nRepetition: Several measurements are repeated on the same trial objects.\nRandomization: Trial objects are assigned randomly to Treatment and Control groups to eliminate systematic bias\nBlocking: Trial objects are grouped into homogeneous blocks based on one or more influential variables to reduce variability.\nCovariate adjustment: Nuisance variables are included as covariates in the statistical model to account for their effects.\n\n\n\nMinimizing the error variance\n\nReliable measurement setup: Standardization of the experimental conditions\nSample size: Larger sample sizes reduce the impact of individual measurement errors\nSuitable analytical methods: Use of robust estimators to account for heterogeneous error variance\n\n\n\n\nProperties of measurement instruments\n\nObjectivity: Objectivity of an instrument is given when the results are independent of personnel and calculation methods.\nReliability: Reliability is the degree to which an instrument produces the same result each time under comparable conditions.\nValidity: Validity is the extent to which an instrument measures what was intended."
  },
  {
    "objectID": "hs25/doe/doe_notes.html#design-of-experiments-types",
    "href": "hs25/doe/doe_notes.html#design-of-experiments-types",
    "title": "Design of Experiments",
    "section": "Design of Experiments Types",
    "text": "Design of Experiments Types\n\nTrial and error\nCombination of parameters have no structure and are mixed randomly. No idea what factors influence how.\n\n\nOne-factor-at-a-time\nVary the first factor and then measure fuel consumption. Keep the setting with the lowest consumption and then vary the next factor. Easy to implement, but interaction between factors are not recognized. Research question is answered neither systematically nor exhaustively.\n\n\nFull factorial design\nTwo levels (+/-) are defined per factor. All possible combinations of factor levels are varied. All main effects and all interactions can be determined. Can be used as a screening experiment to identify potentially important variables. The effort involved increases rapidly as the number of factors increases. Each additional factor doubles the number of combinations.\n\nProfile Plot\nImpact of the factors on the dependent variable \\(x\\). Based model:\n\\[\ny = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 \\dots + \\beta_n x_n\n\\]"
  },
  {
    "objectID": "hs25/doe/doe_notes.html#factorial-design-with-interactions",
    "href": "hs25/doe/doe_notes.html#factorial-design-with-interactions",
    "title": "Design of Experiments",
    "section": "Factorial design with interactions",
    "text": "Factorial design with interactions\nInteractions can occur in experiments with two or more independent variables. An interaction of two factors means that the two factors interact in a complex way. If there is an interaction, the effect of one factor depends on the levels of the other factor. Interaction terms are written as multiplication.\n\nTwo way interaction: \\(x_1 \\times x_2\\)\nThree way interaction: \\(x_1 \\times x_2 \\times x_3\\)\n\n\\[\ny = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\beta_3 x_1 \\times x_2\n\\]\n\nFull factorial designs\nGeneralization of two-level full factorial design with \\(k\\) factors and \\(n\\) levels. All possible factor combinations are varied.\n\\[\n\\text{combinations} = n^k\n\\]\n\n\nFractional factorial designs\nOnly a (balanced) part of the possible combinations of factors are varied.\n\\[\n\\text{combinations} = n^{k-1}\n\\]\n\nDesign\n\nProcedure: The factor levels are determined before the experiment\nFactor combinations: Only a part of the possible combinations of factors are selected\nRestrictions: In fractional factorial designs, interactions can only be partially measured because not all possible combinations of factor levels are tested.\nAdvantages: The effort involved is significantly lower compared to full factorial designs\nStatistical analysis: As in the case of full factorial design, but without interactions"
  },
  {
    "objectID": "hs25/doe/doe_notes.html#quality-criteria-of-experiments",
    "href": "hs25/doe/doe_notes.html#quality-criteria-of-experiments",
    "title": "Design of Experiments",
    "section": "Quality criteria of experiments",
    "text": "Quality criteria of experiments\n\nInternal Validity\nExists when changes in dependent variables (DV) are attributed to independent variables (IV). Increases with decreasing impact of nuisance variables.\n\nPopulation Validity\nDegree to which the results of a study can be generalized from the sample to the whole population.\n\n\nSituation Validity\nDegree to which the findings of a study can be applied to different situations.\n\n\n\nExternal Validity\nExists when experimental results from a sample can be generalized to the entire population. Increases with increasing naturalness.\n\n\nConstruct Validity\nEffectiveness of the measurement methods in precisely capturing the intended construct\n\n\nRelationship between Internal vs.¬†External Validity\n\n\n\nRelationship between Internal vs.¬†External Validity\n\n\nThe lowest general level of validity is at the bottom left for the quasi-experimental laboratory study, and the highest is at the top right for the experimental field study. A well-controlled lab experiment may maximize internal validity by eliminating confounding variables."
  },
  {
    "objectID": "hs25/pds/pds_notes.html",
    "href": "hs25/pds/pds_notes.html",
    "title": "Python for Data Science - Notes",
    "section": "",
    "text": "An interpreter translates code and sends it to the CPU. The code is sent to the interpreter line by line. The interpreter provides a console for ad-hoc commands. It‚Äôs usually slower than a compiler and not good for optimization.\nA compiler processes source code and returns an executable file. Compiler languages are usually fast and made for optimization (speed, storage use). Executable code is almost impossible to reverse-engineer."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#interpreter-vs.-compiler-languages",
    "href": "hs25/pds/pds_notes.html#interpreter-vs.-compiler-languages",
    "title": "Python for Data Science - Notes",
    "section": "",
    "text": "An interpreter translates code and sends it to the CPU. The code is sent to the interpreter line by line. The interpreter provides a console for ad-hoc commands. It‚Äôs usually slower than a compiler and not good for optimization.\nA compiler processes source code and returns an executable file. Compiler languages are usually fast and made for optimization (speed, storage use). Executable code is almost impossible to reverse-engineer."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#python-console-vs.-script",
    "href": "hs25/pds/pds_notes.html#python-console-vs.-script",
    "title": "Python for Data Science - Notes",
    "section": "Python console vs.¬†script",
    "text": "Python console vs.¬†script\nThe Python console is a direct interface to the interpreter. Every instruction is sent sequentially to the interpreter. Commands sent in the console are sent directly to the interpreter.\nA Python script is a collection of commands. Executing a Python script means sending all the commands it contains consecutively to the interpreter."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#virtual-enviroments-venv",
    "href": "hs25/pds/pds_notes.html#virtual-enviroments-venv",
    "title": "Python for Data Science - Notes",
    "section": "Virtual enviroments (venv)",
    "text": "Virtual enviroments (venv)\nTo avoid dependency issues of packages and keep the development environment clean, developers programme applications in virtual environments.\nPython3 -m venv .venv # Standard name\n\nNote: It is best practice to name the virtual environment .venv to hide it in the file system.\n\nYou need to activate the virtual environment.\n. .venv/bin/activate # For Linux\nYou can install packages into the venv with python3-pip."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#variabels-and-basic-data-types",
    "href": "hs25/pds/pds_notes.html#variabels-and-basic-data-types",
    "title": "Python for Data Science - Notes",
    "section": "Variabels and Basic data types",
    "text": "Variabels and Basic data types\nA variable is a name that refers to a particular or undefined value. In programming languages, we use them as a reference to a particular storage location. A variable always consists of a name, a data type, a storage location and a value. Python does not require any type for variable definitions. It assumes the type from the value.\n\nNote: Variable names are usually written in lowercase.\n\nBasic data types:\n\nInteger (int)\nString (str)\nBoolean (bool).\nList\nDictionary"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#mathematical-operations",
    "href": "hs25/pds/pds_notes.html#mathematical-operations",
    "title": "Python for Data Science - Notes",
    "section": "Mathematical Operations",
    "text": "Mathematical Operations\nDepending on the context, two particular mathematical operators can have different meanings. The sum operator (\\(+\\)), except for numerical values, means appending one element to another. This usually requires two elements of the same data type. The multiplication operation (\\(*\\)) always has to be applied with an integer.\n\nNote: Sum and multiplication can be used with strings."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#boolean-operations",
    "href": "hs25/pds/pds_notes.html#boolean-operations",
    "title": "Python for Data Science - Notes",
    "section": "Boolean operations",
    "text": "Boolean operations\nTwo Boolean values can be combined in different ways using the keywords and, or and xor. Any Boolean operation can be inverted using the keyword not."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#bitwise-operations",
    "href": "hs25/pds/pds_notes.html#bitwise-operations",
    "title": "Python for Data Science - Notes",
    "section": "Bitwise operations",
    "text": "Bitwise operations\nBitwise operations in Python are used to manipulate individual bits of integer values.\n\nx | y bitwise or of x and y\nx ^ y bitwise exclusive or of x and y\nx & y bitwise and of x and y\nx &lt;&lt; n x shifted left by n bits\nx &gt;&gt; n x shifted right by n bits\n~x the bits of x inverted"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#comparison-operations",
    "href": "hs25/pds/pds_notes.html#comparison-operations",
    "title": "Python for Data Science - Notes",
    "section": "Comparison operations",
    "text": "Comparison operations\n\n&lt; strictly less than\n&lt;= less than or equal\n&gt; strictly greater than\n&gt;= greater than or equal\n== equal\n!= not equal\nis object identity\nis not negated object identity\n\n\nNote: Comparisons can be chained arbitrarily."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#single-block",
    "href": "hs25/pds/pds_notes.html#single-block",
    "title": "Python for Data Science - Notes",
    "section": "Single block",
    "text": "Single block\ninstruction\ninstruction\nblock header:\n‚Ä¢‚Ä¢‚Ä¢‚Ä¢block instruction\n‚Ä¢‚Ä¢‚Ä¢‚Ä¢block instruction\n‚Ä¢‚Ä¢‚Ä¢‚Ä¢block instruction\ninstruction\ninstruction"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#nested-blocks",
    "href": "hs25/pds/pds_notes.html#nested-blocks",
    "title": "Python for Data Science - Notes",
    "section": "Nested blocks",
    "text": "Nested blocks\ninstruction\ninstruction\nblock 1 header:\n‚Ä¢‚Ä¢‚Ä¢‚Ä¢block 1 instruction\n‚Ä¢‚Ä¢‚Ä¢‚Ä¢block 2 header:\n‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢block 2 instruction\n‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢block 2 instruction\n‚Ä¢‚Ä¢‚Ä¢‚Ä¢block 1 instruction\n‚Ä¢‚Ä¢‚Ä¢‚Ä¢block 1 instruction\ninstruction"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#elif-concatenation",
    "href": "hs25/pds/pds_notes.html#elif-concatenation",
    "title": "Python for Data Science - Notes",
    "section": "Elif concatenation",
    "text": "Elif concatenation\nelif allows for concatenating multiple conditions.\n\nx = 6\n\nif x == 10:\n    print(\"x has the value 10\")\nelif x % 2 == 0:\n    print(\"x is an even number\")\n\nx is an even number"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#shorthand-statement",
    "href": "hs25/pds/pds_notes.html#shorthand-statement",
    "title": "Python for Data Science - Notes",
    "section": "Shorthand statement",
    "text": "Shorthand statement\nShorthand if statements allow for less code and better readability.\n\nx = 10\n\n# Block\nif x == 10:\n    x += 1\n    print(x)\nelse:\n    None\n\n## Is the same as\n\nx = 10\n# One Line\nx = x + 1 if x == 10 else None\nprint(x)\n\n11\n11"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#range",
    "href": "hs25/pds/pds_notes.html#range",
    "title": "Python for Data Science - Notes",
    "section": "range ()",
    "text": "range ()\nThe class range() allows creating sequence objects with constant step sizes. Ranges implement all of the common sequence operations except concatenation and repetition.\n\nNotes: The stop element is not included.\n\n\nmy_range = list(range(2, 11, 2)) # Start = 2, End = 11, Steps = 2\nprint(my_range)\n\n[2, 4, 6, 8, 10]"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#len",
    "href": "hs25/pds/pds_notes.html#len",
    "title": "Python for Data Science - Notes",
    "section": "len()",
    "text": "len()\nlen() returns the number of elements in a sequence. Returns positive integer: 0 indicates an empty sequence.\n\nmy_lenght = len(range(1, 11, 1))\nprint(my_lenght)\n\n10"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#sequence-slicing",
    "href": "hs25/pds/pds_notes.html#sequence-slicing",
    "title": "Python for Data Science - Notes",
    "section": "Sequence Slicing",
    "text": "Sequence Slicing\nExtracting sub-sequences of larger data containers is an important and often used operation. Slicing options are:\n\nBy integer (particular element)\nBy range or slice object\n\n\nmy_list = list(range(1, 11, 1))\nprint(f\"My list: {my_list}\")\n\n# Extract only even numbers\neven_numbers = my_list[1:11:2] # Start = Index 1 (second entry), Steps = 2\nprint(f\"All even numbers in my list: {even_numbers}\")\n\n# Extract only odd numbers\nodd_numbers = my_list[0:11:2] # Start = Index 0 (first entry), Steps = 2\nprint(f\"All odd numbers in my list: {odd_numbers}\")\n\nMy list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nAll even numbers in my list: [2, 4, 6, 8, 10]\nAll odd numbers in my list: [1, 3, 5, 7, 9]\n\n\n\nNote: Same as slice()"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#for-loop",
    "href": "hs25/pds/pds_notes.html#for-loop",
    "title": "Python for Data Science - Notes",
    "section": "for-loop",
    "text": "for-loop\nLoops are used to iterate over sequence objects by providing each element one after the other through a loop variable. Assign each element of the sequence one after another to the loop variable.\n\n# Single loop\nmy_list = list(range(1, 11, 1))\nprint(f\"My list: {my_list}\")\n\nfor element in my_list:\n    print(f\"Element is {element}\")\nelse:\n    print(\"No more elements in my list\")\n\nMy list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nElement is 1\nElement is 2\nElement is 3\nElement is 4\nElement is 5\nElement is 6\nElement is 7\nElement is 8\nElement is 9\nElement is 10\nNo more elements in my list\n\n\n\nNote: The loop variable is often called i: for i in my_list:."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#while-loop",
    "href": "hs25/pds/pds_notes.html#while-loop",
    "title": "Python for Data Science - Notes",
    "section": "while-loop",
    "text": "while-loop\nA while loop executes the loop body as long as the condition equals True. The while loop checks the condition each time before re-executing the loop body and terminates as soon as the condition is False.\n\naim = 5\ncounter = 0\n\nwhile counter != aim: # != means not equal\n    print(f\"Counter at value {counter}\")\n    counter += 1 # Add 1 to the counter\nelse:\n    print(\"Aim reached\")\n\nCounter at value 0\nCounter at value 1\nCounter at value 2\nCounter at value 3\nCounter at value 4\nAim reached\n\n\n\nNote: Check whether the condition can be reached! Otherwise, you will end up in an infinite loop."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#break-continue-and-pass",
    "href": "hs25/pds/pds_notes.html#break-continue-and-pass",
    "title": "Python for Data Science - Notes",
    "section": "break, continue and pass",
    "text": "break, continue and pass\nPython has three keywords to control the loop (and function) process flow:\n\nbreak\nImmediately break the current loop.\n\naim = 5\ncounter = 0\n\nwhile counter != aim:\n    print(f\"Counter at value {counter}\")\n    counter += 1\n    break # Force a loop break\nelse:\n    print(\"Aim reached\")\n\nCounter at value 0\n\n\n\n\ncontinue\nIgnoring the rest of the loop body and jumping back to the header.\n\naim = 5\ncounter = 0\n\nwhile counter != aim:\n    print(f\"Counter at value {counter}\")\n    counter += 1\n    continue\n    print(\"This msg will not be printed\")\nelse:\n    print(\"Aim reached\")\n\nCounter at value 0\nCounter at value 1\nCounter at value 2\nCounter at value 3\nCounter at value 4\nAim reached\n\n\n\n\npass\nNo operation. Regular iteration with no execution.\n\naim = 5\ncounter = 0\n\nwhile counter != aim:\n    print(f\"Counter at value {counter}\")\n    counter += 1\n    pass\nelse:\n    print(\"Aim reached\")\n\nCounter at value 0\nCounter at value 1\nCounter at value 2\nCounter at value 3\nCounter at value 4\nAim reached"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#enumerate",
    "href": "hs25/pds/pds_notes.html#enumerate",
    "title": "Python for Data Science - Notes",
    "section": "Enumerate",
    "text": "Enumerate\nThe enumerate returns an iterator that returns a tuple with an incrementing number for each element of the sequence.\n\nx = list(range(0, 11, 2))\n\nfor idx, i in enumerate(x):\n    print(f\"Value {i} at Index {idx}\")\n\nValue 0 at Index 0\nValue 2 at Index 1\nValue 4 at Index 2\nValue 6 at Index 3\nValue 8 at Index 4\nValue 10 at Index 5"
  },
  {
    "objectID": "hs25/pds/pds_notes.html#remote-app-development",
    "href": "hs25/pds/pds_notes.html#remote-app-development",
    "title": "Python for Data Science - Notes",
    "section": "Remote App Development",
    "text": "Remote App Development\nModern data analysis methods (e.g.¬†deep learning, optimisation) require large computational resources such as memory or gpu. Remote resources can be provided by individual institutions like HSLU, or rent from web service providers like Amazone Web Services (AWS) or Google Cloud Platform (GCP). Data scientists use two popular Python development environments for data analysis and reporting: Desktop IDE (PyCharm) and Notebooks (Jupyter)."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#jupyter-nootebooks",
    "href": "hs25/pds/pds_notes.html#jupyter-nootebooks",
    "title": "Python for Data Science - Notes",
    "section": "Jupyter Nootebooks",
    "text": "Jupyter Nootebooks\nA Jupyter Notebook is a web-based, open-source tool that combines live code (like Python), equations, output, and narrative text (Markdown) into a single, interactive document. It is organized into cells and is a cornerstone of data science for combining execution and documentation, making analysis transparent and reproducible."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#debugging",
    "href": "hs25/pds/pds_notes.html#debugging",
    "title": "Python for Data Science - Notes",
    "section": "Debugging",
    "text": "Debugging\n\nSemantic errors: violating rules of coding language.\nSyntax errors: missing code elements (e.g.¬†parathesis).\nLogical errors: correct syntax but incorrect directions causing undesired output.\nRuntime errors: error happens when application is running or starting up.\nect.\n\n\nBreakpoints\nBreakpoints define code locations where the execution shall stop. The execution is stopped before the selected line of code.\n\n\nDebugger\nA debugger is a tool that allows developers to meticulously examine and control the execution of their code. It enables the setting of breakpoints, allowing the developer to inspect the current state of variables, the call stack (the sequence of function calls that led to the current point), and memory. This step-by-step execution, often called stepping (e.g., step over, step into, step out), is fundamental for isolating and understanding the root cause of bugs or unexpected behavior."
  },
  {
    "objectID": "hs25/pds/pds_notes.html#enum-data-type",
    "href": "hs25/pds/pds_notes.html#enum-data-type",
    "title": "Python for Data Science - Notes",
    "section": "Enum data type",
    "text": "Enum data type\nAn Enum is a set of symbolic names bound to unique values. Enumeration requires the package Enum.\n\nfrom enum import Enum\n\nEnum allows handle a set of values:\n\ndays of the week\nColors\nect."
  },
  {
    "objectID": "hs25/sa/sa_notes.html",
    "href": "hs25/sa/sa_notes.html",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "",
    "text": "Statistic is the discipline that concerns collection, organisation, analysis, interpretation, and presentation of data. Applied statistics applies to real everyday problems.\n\nNote: There is no cooking recipes how to solve problems."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#one-dimensional",
    "href": "hs25/sa/sa_notes.html#one-dimensional",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "One-Dimensional",
    "text": "One-Dimensional\nList are the simplest kind od datasets. Lists are heterogeneous data structures."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#two-dimentinal",
    "href": "hs25/sa/sa_notes.html#two-dimentinal",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Two-Dimentinal",
    "text": "Two-Dimentinal\nTabels are the most common form of datasets"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#location-parameters",
    "href": "hs25/sa/sa_notes.html#location-parameters",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Location parameters",
    "text": "Location parameters\n\nArithemtic mean (average)\nMedian\nQuantil"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#spread-parameters",
    "href": "hs25/sa/sa_notes.html#spread-parameters",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Spread parameters",
    "text": "Spread parameters\n\nEmpirical variance\nStadnard deviation\nInterquantile range"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#artithmetic-mean",
    "href": "hs25/sa/sa_notes.html#artithmetic-mean",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Artithmetic Mean",
    "text": "Artithmetic Mean\nMean tells a lot about a dataset: ‚ÄúCenter‚Äù of data. But average does not tell whole story about (quantitative) datasets. Datasets can have a different spread around mean.\n\\[\n\\bar{x} = \\dfrac{x_1 + x_2 + \\dots{} + x_n}{n} = \\dfrac{1}{n}\\sum^n_{i=1}x_i\n\\]\n\nx &lt;- c(4.3, 5.2, 2.7, 3.1)\nmean(x)\n\n[1] 3.825\n\n\n\nNote: The arithmetic mean is not robust to outliers."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#empirical-variancehave",
    "href": "hs25/sa/sa_notes.html#empirical-variancehave",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Empirical Variancehave",
    "text": "Empirical Variancehave\nThe value of empirical variance has no physical interpretation.\n\\[\nVar(x) = \\dfrac{(x_1-\\bar{x})¬≤ + (x_2-\\bar{x})¬≤ + \\dots + (x_n-\\bar{x})¬≤ }{n-1} = \\dfrac{1}{n-1}\\sum^n_{i=1}(x_i - \\bar{x}¬≤)\n\\]\n\nx &lt;- c(4.3, 5.2, 2.7, 3.1)\nvar(x)\n\n[1] 1.3025"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#standard-deviation",
    "href": "hs25/sa/sa_notes.html#standard-deviation",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Standard Deviation",
    "text": "Standard Deviation\nStandard deviation is root of variance. Standard deviation has same unit as data itself.\n\\[\ns_x = \\sqrt{Var(x)} = \\sqrt{\\dfrac{1}{n-1}\\sum^n_{i=1}(x_i - \\bar{x}¬≤)}\n\\]\n\nx &lt;- c(4.3, 5.2, 2.7, 3.1)\nsd(x)\n\n[1] 1.141271"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#median",
    "href": "hs25/sa/sa_notes.html#median",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Median",
    "text": "Median\nAlso called central value or average value. Median is much less influenced by extreme observations than mean.\n\nx &lt;- c(4.3, 5.2, 2.7, 3.1)\nmedian(x)\n\n[1] 3.7\n\n\n\nNote: Consider Mean and Median simultaneously instead of choosing one."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#quantiles",
    "href": "hs25/sa/sa_notes.html#quantiles",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Quantiles",
    "text": "Quantiles\nQuantiles are values that divide a dataset into equal parts, allowing for the analysis of the distribution of data. Common types of quantiles include quartiles which split data into four parts.\n\nNote: Most of the time there is no exact 25 % of observations.\n\n\nx &lt;- c(4.3, 5.2, 2.7, 3.1)\nquantile(x) # Default quartil\n\n   0%   25%   50%   75%  100% \n2.700 3.000 3.700 4.525 5.200 \n\nquantile(x, p = 0.7) # Individual value\n\n 70% \n4.39"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#boxplot",
    "href": "hs25/sa/sa_notes.html#boxplot",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Boxplot",
    "text": "Boxplot\n\n\n\nBoxplot: Schematically\n\n\n\nBox: Height is bounded by the lower and upper quartiles. The height of the box is the interquartile range.\nHorizontal line in box: Median\nWhisker: \\(1.5 \\times \\text{IQR}\\), defined by inventor John Tukey.\nPoints: Outliers\n\n\nNote: The upper and lower whiskers do not have to be \\(1.5 \\times \\text{IQR}\\) in length.\n\n\n# Single boxplot\nset.seed(42) # Set seed for reproducibility\nx &lt;- rnorm(10) # Generate 10 random samples\n\nboxplot(x) # Plot data\n\n\n\n\n\n\n\n\n\n# Compare two sample groups\nset.seed(42)\nx &lt;- rnorm(100)\ny &lt;- rnorm(100)\n\nboxplot(x, y)"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#histogram",
    "href": "hs25/sa/sa_notes.html#histogram",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Histogram",
    "text": "Histogram\nGraphical overview of occurring values. Draw a bar for each class, with the height proportional to the number of observations in that class.\n\n# Simple histogram\nset.seed(42)\nx &lt;- rnorm(1000)\n\nhist(x)\n\n\n\n\n\n\n\n\nThe selection of the number of classes is relevant for the interpretation of a histogram.\n\n# Big breaks\nset.seed(42)\nx &lt;- rnorm(1000)\n\nhist(x, breaks=5)\n\n\n\n\n\n\n\n\n\n# Small breaks\nset.seed(42)\nx &lt;- rnorm(1000)\n\nhist(x, breaks=50)\n\n\n\n\n\n\n\n\n\nNote: Since we used set.seed(42), both plots show the same data.\n\n\nSkweness of Hostograms\nHistograms can have a skewness depending on the data.\n\n# Right skewed data\nset.seed(42)\nx &lt;- rexp(1000, rate = 1) # Using expontial distribution\n\nhist(x, breaks=50)\n\n\n\n\n\n\n\n\n\n# Left left data\nset.seed(42)\nx &lt;- rexp(1000, rate = 1)\nx &lt;- -x # Trun data positivity\n\nhist(x, breaks=50)\n\n\n\n\n\n\n\n\n\nNote: The terms ‚Äúright‚Äù and ‚Äúleft‚Äù always refer to the direction where there is less data (the tail of the distribution)."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#normalised-histograms",
    "href": "hs25/sa/sa_notes.html#normalised-histograms",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Normalised Histograms",
    "text": "Normalised Histograms\nSelect the bar height such that the bar area corresponds to the proportion of respective observations in the total number of observations.\n\nNote: Density values are not percentages.\n\n\n# Normalized histogram\nset.seed(42)\nx &lt;- rnorm(1000)\n\nhist(x, freq=FALSE) # Disable frequency"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#boxplot-x-histogram",
    "href": "hs25/sa/sa_notes.html#boxplot-x-histogram",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Boxplot X Histogram",
    "text": "Boxplot X Histogram\n\n\n\nBoxplot X Histogram"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#probability-model",
    "href": "hs25/sa/sa_notes.html#probability-model",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Probability Model",
    "text": "Probability Model\nProbability models use set theory as a language. For random experiments, the outcome is not predictable. A probability model consists of events that are possible in such an experiment and probabilities for different results occurring. Probability models have the following components:\n\nSample space \\(\\Omega\\): Contains all possible elementary events \\(\\omega\\).\nEvents \\(A, B, C\\): Subsets of the sample space.\nProbabilities \\(p\\) associated with events \\(A, B, C\\).\nEvent: More general and more important than elementary events, but consists of them.\n\nProbability formula:\n\\[\np(E)=\\dfrac{\\lvert E \\rvert}{\\lvert \\Omega \\rvert} \\text{, where } E \\subseteq \\Omega\n\\]"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#set-theory",
    "href": "hs25/sa/sa_notes.html#set-theory",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Set Theory",
    "text": "Set Theory\n\nUnion: \\(A \\cup B\\)\nIntersection: \\(A \\cap B\\)\nComplement: \\(\\bar{A}\\)\nDifference: \\(A \\setminus B\\)\n\n\n\n\nSet theory"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#axioms-of-probability",
    "href": "hs25/sa/sa_notes.html#axioms-of-probability",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Axioms of Probability",
    "text": "Axioms of Probability\nEach event \\(A\\) probability \\(P(A)\\) is assigned, with properties:\n\n\\(p(A) \\geq 0\\)\n\\(p(\\Omega) = 1\\)\n\\(p(A \\cup B) = p(A) + p(B) \\text{, if } A \\cap B = \\emptyset\\)\n\n\nNote: Kolmogorov Axioms of Probability"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#laws-for-calculating-probabilities",
    "href": "hs25/sa/sa_notes.html#laws-for-calculating-probabilities",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Laws for Calculating Probabilities",
    "text": "Laws for Calculating Probabilities\nIf \\(A, B\\) and \\(A_1, \\dots, A_n\\) events, then:\n\n\\(p(\\bar{A}) = 1 - p(A) \\text{, for all } A\\)\n\\(p(A \\cup B) = p(A) + p(B) - p(A \\cap B) \\text{, for all } A \\text{ and } B\\)\n\\(p(A_1 \\cup \\dots A_n) \\leq p(A_1) + \\dots + p(A_n) \\text{, for all } A_1, \\dots, A_n\\)\n\\(p(B) \\leq p(A) \\text{, for all } A \\text{ and } B \\text{ with } B \\subseteq A\\)\n\\(p(A \\setminus B) = p(A) - p(B) \\text{, for all } A \\text{ and } B \\text{ with } B \\subseteq A\\)"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#discrete-probability-models",
    "href": "hs25/sa/sa_notes.html#discrete-probability-models",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Discrete Probability Models",
    "text": "Discrete Probability Models\nA sample space can be finite or infinite and discrete. It can also be infinite but still discrete.\n\nProbabilities for Discrete Models\nThe probability of event \\(A = {\\omega_1, \\omega_2, \\dots, \\omega_n}\\) is determined by the sum of the probabilities \\(p(\\omega)\\) of the corresponding elementary events.\n\\[\np(A) = \\sum_{\\omega_i \\in A} p(\\omega_i)\n\\]"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#laplace-model",
    "href": "hs25/sa/sa_notes.html#laplace-model",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Laplace Model",
    "text": "Laplace Model\nProbabilities of all elementary elements add up to 1.\n\\[\np(E) = \\dfrac{f}{p} = \\sum_{k:\\omega_i \\in E} p(\\omega_k)\n\\]\nDivides number of ‚Äúfavorable‚Äù elementary events by number of ‚Äúpossible‚Äù elementary events."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#stochastic-independence",
    "href": "hs25/sa/sa_notes.html#stochastic-independence",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Stochastic Independence",
    "text": "Stochastic Independence\nIf events \\(A\\) and \\(B\\) are stochastically independent, then:\n\\[\nP(A \\cap B) = P(A) \\cdot P(B)\n\\]\n\nNote: Formula applies only if events A and B are stochastically independent.\n\nOutcome of event A has no influence on outcome of event B and vice versa."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#random-variable",
    "href": "hs25/sa/sa_notes.html#random-variable",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Random Variable",
    "text": "Random Variable\nA Random variable X is a function:\n\\[\n\\Omega \\to W_X \\subset \\mathbb{R}\n\\] \\[\n\\omega \\to X(\\omega)\n\\]\nRandom variable denoted by capital letters X (or Y, Z). Corresponding lowercase letters x (or y, z) represents specific value that random variable can take. Once \\(\\omega\\) is chosen: \\(X(\\omega)\\) is fixed, not random.\n\nNote: \\(x\\) also called a realisation of random variable \\(X\\)."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#probability-distribution-of-random-variable",
    "href": "hs25/sa/sa_notes.html#probability-distribution-of-random-variable",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Probability Distribution of Random Variable",
    "text": "Probability Distribution of Random Variable\nValues of random variable X (possible realisations of X) occur with certain probabilities that \\(X\\) takes value \\(x\\):\n\\[\nP(X = x) = P(\\{\\omega \\mid X(\\omega) = x\\}) = \\sum_{\\omega; X(\\omega)=x} P(\\omega)\n\\]"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#probability-distribution",
    "href": "hs25/sa/sa_notes.html#probability-distribution",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Probability Distribution",
    "text": "Probability Distribution\nAssociated probability is determined for all realisations of random variable. List of \\(P(X = x)\\) for all possible values \\(x_1, x_2, \\dots, x_n\\) is called discrete probability distribution of discrete random variable \\(X\\).All values of probability distribution has to sum up to 1.\n\\[\n\\sum_{\\text{For all }x} P(X = x) = 1\n\\]\n\nNote: For finite sample space the probability distribution is a table."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#key-figures-of-distribution",
    "href": "hs25/sa/sa_notes.html#key-figures-of-distribution",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Key Figures of Distribution",
    "text": "Key Figures of Distribution\n\nExpected Value \\(E(X)\\)\nCentral location of distribution. Weighted mean of all possible values, weighted by their probability of occurring.\n\\[\n\\mu = \\sum_{\\text{all possible } x} x \\times P(X = x)\n\\]\n\nNote: \\(E(X)\\) is a theoretical value, which results from a model, i.e.¬†distribution.\n\n\n\nVariance\nVariance is square of spread of value of random variable from expected value weighted with respective weight.\n\\[\n\\sigma = \\sum_{\\text{all possible } x} (x - E(X))^2 \\times P(X = x)\n\\]\n\n\nStandard deviation \\(\\sigma\\)\nSpread of distribution about \\(E(X)\\). Standard deviation has same unit as X.\n\\[\n\\sigma(X) = \\sqrt{Var(X)}\n\\]\n\nNote: \\(\\sigma(x)\\) is a theoretical value, which results from a model, i.e.¬†distribution.\n\n\nx &lt;- 1 : 6\np &lt;- 1 / 6\nE_X &lt;- sum(x * p)\nvar_X &lt;- sum((x - E_X)^2 * p)\nsd_X &lt;- sqrt(var_X)\n\nsd_X\n\n[1] 1.707825\n\n\n\nNote: Means: Deviation on ‚Äúaverage‚Äù 1.7 from 3.5."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#continuous-probability-distribution",
    "href": "hs25/sa/sa_notes.html#continuous-probability-distribution",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Continuous Probability Distribution",
    "text": "Continuous Probability Distribution\nFor continuous probability distributions, probabilities correspond to areas under density function. Range \\(W_X\\) of a random variable: Set of all values \\(X\\) can take. Random variable \\(X\\) is continuous, if its range \\(W_X\\) is continuous. For continuous random variable \\(X\\) for all \\(x \\in W_X\\):\n\\[\nP(X = x) = 0\n\\]\n\nNote: Probability distribution of \\(X\\) can not be described by \\(P(X = x)\\)."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#probability-density",
    "href": "hs25/sa/sa_notes.html#probability-density",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Probability Density",
    "text": "Probability Density\nProbability density function f(x) has the properties:\n\nFunction is not negative: \\(f(x) \\ge 0\\)\nProbability corresponds to area between \\(a\\) and \\(b\\) under \\(f(x)\\): \\(P(a \\lt X \\le b )\\)\nTotal area under curve is \\(1\\)\n\n\nNote: Values of f(x) are not probabilities, only areas are."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#quantiles-of-continuous-probability-distribution",
    "href": "hs25/sa/sa_notes.html#quantiles-of-continuous-probability-distribution",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Quantiles of Continuous Probability Distribution",
    "text": "Quantiles of Continuous Probability Distribution\nFor continuous distributions, the \\(\\alpha\\) quantile \\(q_\\alpha\\) is value where area (probability) under density function from \\(-\\infty\\) to \\(q_\\alpha\\) is just \\(\\alpha\\).\n\n\n\nQuantiles of Continuous Probability Distribution"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#normal-distribution",
    "href": "hs25/sa/sa_notes.html#normal-distribution",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Normal Distribution",
    "text": "Normal Distribution\nThe normal distribution \\(X \\sim \\mathcal{N}(\\mu, \\sigma^2)\\) have the desity function:\n\\[\nf(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma} \\exp\\left\\{ -\\frac{1}{2} \\left(\\frac{x - \\mu}{\\sigma}\\right)^2 \\right\\}\n\\]\nWith the expected value \\(E(X) = \\mu\\) and variance \\(Var(X) = \\sigma^2\\). The parameter \\(\\mu\\) shifts the curve horizontally from origin while \\(\\sigma\\) defines the shape of the curve.\n\nProperties\n\nApprox. \\(\\frac{2}{3}\\) of are between \\(\\mu \\pm \\sigma\\)\nApprox. 95% of area between \\(\\mu \\pm 2\\sigma\\)\n\n\n\nCalculate Normal Distributed Probability\nCalculation of IQ \\(P(X \\le 130)\\):\n\n# mean and sd are predefined in this task\npnorm(q = 130, mean = 100, sd = 15)\n\n[1] 0.9772499\n\n\nsince total area under curve is 1, \\(P(X \\gt 130)\\):\n\n1 - pnorm(q = 130, mean = 100, sd = 15)\n\n[1] 0.02275013\n\n\nDetermine quantiles:\n\nqnorm(p = 0.025, mean = 100, sd = 15)\n\n[1] 70.60054\n\nqnorm(p = 0.975, mean = 100, sd = 15)\n\n[1] 129.3995"
  },
  {
    "objectID": "hs25/sa/sa_notes.html#i.i.d-assumption",
    "href": "hs25/sa/sa_notes.html#i.i.d-assumption",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "i.i.d Assumption",
    "text": "i.i.d Assumption\nThe i.i.d. assumption means a set of random variables are Independent (the value of one doesn‚Äôt affect the others) and Identically Distributed (all come from the exact same probability distribution).\n\nKey Figures\n\n\\(S_n\\)\n\n\\(E(S_n) = n\\mu\\)\n\\(\\text{Var}(S_n) = n\\text{Var}(X_i)\\)\n\\(\\sigma(S_n) = \\sqrt{n}\\sigma_X\\)\n\n\n\n\\(\\bar{X}_n\\)\n\n\\(E(\\bar{X}_n) = \\mu\\)\n\\(\\text{Var}(\\bar{X}_n) = \\frac{\\sigma^2_X}{n}\\)\n\\(\\sigma(\\bar{X}_n) = \\frac{\\sigma_X}{\\sqrt{n}}\\)\n\n\nNote: Standard deviation of \\(X_n\\) is called standard error of arithmetic mean."
  },
  {
    "objectID": "hs25/sa/sa_notes.html#central-limit-theorem",
    "href": "hs25/sa/sa_notes.html#central-limit-theorem",
    "title": "Classical and Bayesian Statistics - Notes",
    "section": "Central Limit Theorem",
    "text": "Central Limit Theorem\nThe Central Limit Theorem (CLT) states that, given a sufficiently large sample size (\\(n\\)), the distribution of the sample mean (\\(\\bar{X}_n\\)) will be approximately normally distributed, regardless of the original population‚Äôs distribution. This is true as long as the population has a finite mean (\\(\\mu\\)) and variance (\\(\\sigma^2\\)). In short: For large samples, the sample mean is normally distributed."
  },
  {
    "objectID": "hs25/csc/csc_notes.html",
    "href": "hs25/csc/csc_notes.html",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "",
    "text": "Data Science improves traditional productio nwith basic function by Digital services using Data Science driven functions. The result is a new poroduct type, for Example watch vs.¬†smart watch. To do so, data has to be processec, visialized, tranferd storaged and used in a program."
  },
  {
    "objectID": "hs25/csc/csc_notes.html#how-can-data-science-improve-products-services",
    "href": "hs25/csc/csc_notes.html#how-can-data-science-improve-products-services",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "",
    "text": "Data Science improves traditional productio nwith basic function by Digital services using Data Science driven functions. The result is a new poroduct type, for Example watch vs.¬†smart watch. To do so, data has to be processec, visialized, tranferd storaged and used in a program."
  },
  {
    "objectID": "hs25/csc/csc_notes.html#fundaments-of-computer-networks",
    "href": "hs25/csc/csc_notes.html#fundaments-of-computer-networks",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Fundaments of Computer Networks",
    "text": "Fundaments of Computer Networks\nA computer network is build of several components:\n\nConeccted devises: Hosts (end stystems).\nCommunications linsk: Wired and wireless.\nProtocols: Sending and receiving data.\nPacket switches: routers and switches.\n\n\nExample Net\n\n\n\nEnterprise Network"
  },
  {
    "objectID": "hs25/csc/csc_notes.html#packet-switching",
    "href": "hs25/csc/csc_notes.html#packet-switching",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Packet Switching",
    "text": "Packet Switching\nThe Host dates applicatins messages and breaks them into smaller chunks (aka. packets) of length \\(L\\) bits. The packets are transmitted into access network at rate \\(R\\), called link capacity/bandwith.\n\nPackaet Transmission Delay\n\n\\(L\\): Packet lenght (bits).\n\\(R\\): Link bandwith (dps).\n\n\\[\nd_{\\text{trans}} = \\dfrac{L \\quad \\text{(bits)}}{R \\quad \\text{(bits/sec)}}\n\\]\n\n\nPropagation delay\n\n\\(d\\): Length of physical link.\n\\(s\\): Propagation speed in medium.\n\n\\[\nd_{\\text{prop}} = \\dfrac{d}{s}\n\\]\n\n\nRate\nRate (bits/time unit) at which bits transferred between sender/receiver. We disquinsh between:\n\nInstantaneous: Rate at given point in time.\nAverage: Rate over longer period of time."
  },
  {
    "objectID": "hs25/csc/csc_notes.html#protocol-layers",
    "href": "hs25/csc/csc_notes.html#protocol-layers",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Protocol Layers",
    "text": "Protocol Layers\nProtocols define format, order of msgs sent and received among network entities, and actions taken on msg transmission, receipt.\n\nApplications: FTP, SMTP, HTTP.\nTransport: TCP, UDP.\nNetwork: IP, routing protocols.\nLink: Ethernet, WiFi.\nPhysical: Ethernet, WiFi."
  },
  {
    "objectID": "hs25/csc/csc_notes.html#addressing-in-computer-networks",
    "href": "hs25/csc/csc_notes.html#addressing-in-computer-networks",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Addressing in Computer Networks",
    "text": "Addressing in Computer Networks\n\nDomain Name System\nTranslates domain names to numerical IP addresses.\n\nDNS Recursor (Client Side): Initiates the query. It‚Äôs the first stop and acts as a librarian trying to find the IP address.\nRoot Nameserver (The Dot ‚Äò.‚Äô): The starting point. It directs the Recursor to the correct Top-Level Domain (TLD) Nameserver.\nTLD Nameserver (e.g., .com, .de, .org): Manages all domains under its specific extension. It points the Recursor to the Authoritative Nameserver for the specific domain requested.\nAuthoritative Nameserver: Holds the definitive DNS records (A, CNAME, MX, etc.) for the requested domain. It provides the actual IP address back to the Recursor.\nDNS Recursor / Client: Receives the IP address and finally connects to the web server to load the website.\n\n\n\nIP Addressing\nEach device is assigned a unique IP address build up by Net ID + Host ID"
  },
  {
    "objectID": "hs25/csc/csc_notes.html#switch",
    "href": "hs25/csc/csc_notes.html#switch",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Switch",
    "text": "Switch\nA network switch is a central component in almost every wired network, especially in local area networks (LANs). It acts as an intelligent distribution station for data traffic. Based on incoming frames switch ‚Äúlearns‚Äù location of sender. Records sender/location pair in switch table.\n\nNote: Layer 2 ‚Äì Data Link Layer"
  },
  {
    "objectID": "hs25/csc/csc_notes.html#router",
    "href": "hs25/csc/csc_notes.html#router",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Router",
    "text": "Router\nA router is a network device that forwards data packets between different networks. It ensures that information (e.g.¬†a website, video or email) reaches the recipient from the sender ‚Äì even if it has to pass through many intermediate stations.\n\nNote: Layer 3 ‚Äì Network Layer"
  },
  {
    "objectID": "hs25/csc/csc_notes.html#client-server-communication-pattern",
    "href": "hs25/csc/csc_notes.html#client-server-communication-pattern",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Client Server Communication Pattern",
    "text": "Client Server Communication Pattern\nClients (e.g.¬†Browser) send service requests. Servers (e.g.¬†Web, Database) wait for requests to arrive from clients and then respond to. Client receive service responses from centralized server."
  },
  {
    "objectID": "hs25/csc/csc_notes.html#uniform-resource-locator-url",
    "href": "hs25/csc/csc_notes.html#uniform-resource-locator-url",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Uniform Resource Locator (URL)",
    "text": "Uniform Resource Locator (URL)\nReference to a web resource that specifies its location in a computer network (e.g.¬†web page, video, image, etc.)\n\n\n\nURL Structure"
  },
  {
    "objectID": "hs25/csc/csc_notes.html#html",
    "href": "hs25/csc/csc_notes.html#html",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "HTML",
    "text": "HTML\nDescriptive Language HTML, with a set of HTML elements/tags, is used to create Websites and publish content on the Internet in a simple and standardized way. The Hypertext Transfer Protocol (HTTP) ensures that content on a Web server can be accessed and interpreted by a Web client and thus displayed within a browser.\n\nElements & Tags\nMost HTML Elements are characterized by having a start and end tag.\n&lt;h1&gt;Header 1&lt;/h1&gt;\n&lt;p&gt;Paragraph&lt;/p&gt; \n\nHeadings: Headings are text size pre-sets ranging from &lt;h1&gt; to &lt;h6&gt;\nParagraphs: Paragraphs are used to create text blocks with &lt;p&gt;content&lt;/p&gt;\nBold: With &lt;b&gt; text &lt;/b&gt; text can be set to bold.\nItalic: With &lt;i&gt; text &lt;/i&gt; text can be set to italic.\nUnderline: With &lt;u&gt; text &lt;/u&gt; text can be underlined.\nHyperlinks: Using the anchor tag with an link as attribute: &lt;a href=\"Reference target\"&gt; Text &lt;/a&gt;\nImages: Image tag with at least a source attribute: &lt;img src = \"path/file\" &gt;\n\n\nNested Elements\nIt is possible to include elements within elements. Such constructs are being referred to as nested elements.\n&lt;p&gt;Star&lt;b&gt;Wars&lt;/b&gt;&lt;/p&gt;\n\n\nStructural Elements\nThe structural elements can be considered as the core setup of any HTML Website.\n\n&lt;!DOCTYPE html&gt;: Declares using HTML5\n&lt;html&gt; &lt;/html&gt;: Defines the root of an HTML document\n&lt;head&gt; &lt;/head&gt;: Meta data about the HTML document\n&lt;body&gt; &lt;/body&gt;: All content of the HTML document"
  },
  {
    "objectID": "hs25/csc/csc_notes.html#css",
    "href": "hs25/csc/csc_notes.html#css",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "CSS",
    "text": "CSS\nCSS is a stylesheet language that is primarily used to describe the appearance and formatting of a document written in a markup language such as HTML."
  },
  {
    "objectID": "hs25/csc/csc_notes.html#algorithms",
    "href": "hs25/csc/csc_notes.html#algorithms",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Algorithms",
    "text": "Algorithms\nA computational problem specifies an input-output relationship. An algorithm is an exact specification of how to solve a computational problem. Algorithms must be: - Correct: For each input produce an appropriate output - Efficient: Run as quickly as possible, and use as little memory as possible\n\nDesigning Algorithms\nBreak problem up into smaller (easier) sub-problems. Think only about how to use the smaller solution to get the larger one Do not worry about how to solve to smaller problem (it will be solved using an even smaller one).\n\n\nRecursion\nRecursion is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem. This allows programming in a style that reflects divide-n-conquer algorithmic thinking."
  },
  {
    "objectID": "hs25/csc/csc_notes.html#search-algorithms",
    "href": "hs25/csc/csc_notes.html#search-algorithms",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Search Algorithms",
    "text": "Search Algorithms\nLinear search or sequential search is a simple method for finding an element within a sorted list. It sequentially checks each element of the list until a match is found or the whole list has been searched. A linear search runs in at worst linear time and makes at most \\(n\\) comparisons.\n\nBinary Search\nBinary search is a search algorithm that finds the position of a target value within a sorted list of values. Binary search compares the target value to the middle element of the list. If they are not equal, the half in which the target cannot lie is eliminated and the search continues on the remaining half, again taking the middle element to compare to the target value, and repeating this until the target value is found."
  },
  {
    "objectID": "hs25/csc/csc_notes.html#low-code-environments",
    "href": "hs25/csc/csc_notes.html#low-code-environments",
    "title": "Comuter Science Concepts for Data Science - Notes",
    "section": "Low Code Environments",
    "text": "Low Code Environments\nCombines visual program elements like variables, loops or conditional statements rather than specifying them textually."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html",
    "href": "hs25/lia1/lia1_notes.html",
    "title": "Linear Algebra 01",
    "section": "",
    "text": "Linear algebra is the theory of linear mappings between vector spaces. Broadly, it‚Äôs the theory of certain linear data transformations or manipulations. The main actors are vectors and matrices.\n\n\nA vector \\(\\overrightarrow{a}\\) is data of a number (or magnitude) and a direction. A vector is defined only by its length and direction. Two arrows represent the same vector if one is a parallel translation (shift) of the other. A vector is determined by giving the initial and terminal points of a representative, also called the tail and head of the vector. A vector, such as \\(\\overrightarrow{PQ}\\), is defined by the arrow with initial point \\(P\\) (tail) and terminal point \\(Q\\) (head).\n\nNote: The position of the arrow is not relevant.\n\n\\[\n\\overrightarrow{a} = \\begin{bmatrix}\n1 \\\\\n-3 \\\\\n\\end{bmatrix}\n\\]\n\n\nThe sum of two vectors is calculated component-wise. The summation of vectors is commutative and associative, includes a neutral element (the zero vector), and can be inverted by its negative vector to result in the zero vector.\n\\[\n\\overrightarrow{a} + \\overrightarrow{b} = \\begin{bmatrix}\n1 \\\\\n-3 \\\\\n\\end{bmatrix}\n+\n\\begin{bmatrix}\n4 \\\\\n-1 \\\\\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n5 \\\\\n-2 \\\\\n\\end{bmatrix}\n\\]\n\n\n\nThe difference of two vectors \\(\\overrightarrow{a}\\) and \\(\\overrightarrow{b}\\) is the sum of \\(\\overrightarrow{a}\\) and the opposite of \\(\\overrightarrow{b}\\).\n\\[\n\\overrightarrow{a} - \\overrightarrow{b} = \\overrightarrow{a} + (-\\overrightarrow{b})\n\\]\n\n\n\nScalar multiplication of a vector involves multiplying each component of the vector by a scalar (a real number). This changes the magnitude of the vector, keeping its direction the same if the scalar is positive or reversing it if the scalar is negative. Scalar multiplication of vectors is associative and distributive and includes a neutral element (the scalar 1).\n\\[\n\\dfrac{1}{2}(\\overrightarrow{a} + \\overrightarrow{b})\n=\n\\dfrac{1}{2}(\\begin{bmatrix}\n2 \\\\\n6 \\\\\n\\end{bmatrix}\n+\n\\begin{bmatrix}\n4 \\\\\n2 \\\\\n\\end{bmatrix})\n=\n\\begin{bmatrix}\n3 \\\\\n4 \\\\\n\\end{bmatrix}\n\\]\n\n\n\nThe magnitude (or norm) of a vector \\(\\overrightarrow{a}\\) is its length, and it is denoted by \\(|\\overrightarrow{a}|\\).\n\\[\n\\lvert \\vec{a} \\rvert = \\sqrt{a_x^2 + a_y^2}\n\\]\n\nNote: Length of vector is never negative: \\(\\lvert \\overrightarrow{a} \\rvert \\ge 0\\).\n\n\n\n\nThe vector with a norm of zero is denoted by \\(\\overrightarrow{0}\\). The length of the zero vector is \\(0\\).\n\\[\n|\\overrightarrow{0}| = 0\n\\]\n\nNote: A zero vector has no direction.\n\n\n\n\nThe opposite vector of \\(\\overrightarrow{a}\\) is a vector with the same norm but the opposite direction. It is denoted as \\(-\\overrightarrow{a}\\). In a representative, the initial and terminal points are reversed.\n\nNote: \\(\\overrightarrow{PQ} = -\\overrightarrow{QP}\\), but \\(\\overrightarrow{PQ} \\neq \\overrightarrow{QP}\\)\n\n\n\n\nA unit vector is a vector that has a magnitude of 1 and is often used to indicate direction.\n\\[\n\\lvert \\overrightarrow{e} \\rvert = 1\n\\]\n\n\n\nTwo vectors \\(\\overrightarrow{a}\\) and \\(\\overrightarrow{b}\\) are called collinear or linearly dependent, if:\n\\[\n\\overrightarrow{b} = r \\overrightarrow{a} \\quad \\text{for } r \\in \\mathbb{R}\n\\] \\[\ns \\overrightarrow{b} =  \\overrightarrow{a} \\quad \\text{for } s \\in \\mathbb{R}\n\\]\nMore generally: \\[\nr \\overrightarrow{a} + s \\overrightarrow{b} = \\overrightarrow{0} \\quad \\text{for } r, s \\in \\mathbb{R} \\quad \\text{with } r \\neq 0 \\quad \\text{or } s \\neq 0\n\\]\nThis will be used to generalize definition of linear independence.\n\n\n\nFor every non-zero vector \\(\\overrightarrow{a}\\), there is exactly one unit vector (\\(\\overrightarrow{e}_a\\)) with the same direction. This process is called normalizing a vector.\n\\[\n\\overrightarrow{e}_a = \\dfrac{1}{\\lvert \\overrightarrow{a} \\rvert}\\overrightarrow{a}\n\\]\n\n\n\n\\[\n\\overrightarrow{PQ}\n=\n\\begin{bmatrix}\nx_2 - x_1 \\\\\ny_2 - y_1 \\\\\n\\end{bmatrix}\n\\]\n\n\n\n\nA Cartesian coordinate system is one in which the axes are perpendicular and the units on each axis have the same length. The unit vectors along the axes are typically denoted by \\(\\overrightarrow{e}_x\\) and \\(\\overrightarrow{e}_y\\). Every vector in this system can be represented as a linear combination of these unit vectors.\n\\[\n\\overrightarrow{a} = a_x\\overrightarrow{e}_x + a_y\\overrightarrow{e}_y\n\\]\n\nNote: \\(a_x\\) and \\(a_y\\) are called scalar components of \\(\\overrightarrow{a}\\).\n\n\n\n\nVectors in 3D space have an additional component to represent the third dimension.\n\\[\n\\overrightarrow{a} = \\begin{bmatrix}\n1 \\\\\n-3 \\\\\n2 \\\\\n\\end{bmatrix}\n\\]\n\nNote: The mathematical rules do not change by adding more dimensions."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#vectors",
    "href": "hs25/lia1/lia1_notes.html#vectors",
    "title": "Linear Algebra 01",
    "section": "",
    "text": "A vector \\(\\overrightarrow{a}\\) is data of a number (or magnitude) and a direction. A vector is defined only by its length and direction. Two arrows represent the same vector if one is a parallel translation (shift) of the other. A vector is determined by giving the initial and terminal points of a representative, also called the tail and head of the vector. A vector, such as \\(\\overrightarrow{PQ}\\), is defined by the arrow with initial point \\(P\\) (tail) and terminal point \\(Q\\) (head).\n\nNote: The position of the arrow is not relevant.\n\n\\[\n\\overrightarrow{a} = \\begin{bmatrix}\n1 \\\\\n-3 \\\\\n\\end{bmatrix}\n\\]\n\n\nThe sum of two vectors is calculated component-wise. The summation of vectors is commutative and associative, includes a neutral element (the zero vector), and can be inverted by its negative vector to result in the zero vector.\n\\[\n\\overrightarrow{a} + \\overrightarrow{b} = \\begin{bmatrix}\n1 \\\\\n-3 \\\\\n\\end{bmatrix}\n+\n\\begin{bmatrix}\n4 \\\\\n-1 \\\\\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n5 \\\\\n-2 \\\\\n\\end{bmatrix}\n\\]\n\n\n\nThe difference of two vectors \\(\\overrightarrow{a}\\) and \\(\\overrightarrow{b}\\) is the sum of \\(\\overrightarrow{a}\\) and the opposite of \\(\\overrightarrow{b}\\).\n\\[\n\\overrightarrow{a} - \\overrightarrow{b} = \\overrightarrow{a} + (-\\overrightarrow{b})\n\\]\n\n\n\nScalar multiplication of a vector involves multiplying each component of the vector by a scalar (a real number). This changes the magnitude of the vector, keeping its direction the same if the scalar is positive or reversing it if the scalar is negative. Scalar multiplication of vectors is associative and distributive and includes a neutral element (the scalar 1).\n\\[\n\\dfrac{1}{2}(\\overrightarrow{a} + \\overrightarrow{b})\n=\n\\dfrac{1}{2}(\\begin{bmatrix}\n2 \\\\\n6 \\\\\n\\end{bmatrix}\n+\n\\begin{bmatrix}\n4 \\\\\n2 \\\\\n\\end{bmatrix})\n=\n\\begin{bmatrix}\n3 \\\\\n4 \\\\\n\\end{bmatrix}\n\\]\n\n\n\nThe magnitude (or norm) of a vector \\(\\overrightarrow{a}\\) is its length, and it is denoted by \\(|\\overrightarrow{a}|\\).\n\\[\n\\lvert \\vec{a} \\rvert = \\sqrt{a_x^2 + a_y^2}\n\\]\n\nNote: Length of vector is never negative: \\(\\lvert \\overrightarrow{a} \\rvert \\ge 0\\).\n\n\n\n\nThe vector with a norm of zero is denoted by \\(\\overrightarrow{0}\\). The length of the zero vector is \\(0\\).\n\\[\n|\\overrightarrow{0}| = 0\n\\]\n\nNote: A zero vector has no direction.\n\n\n\n\nThe opposite vector of \\(\\overrightarrow{a}\\) is a vector with the same norm but the opposite direction. It is denoted as \\(-\\overrightarrow{a}\\). In a representative, the initial and terminal points are reversed.\n\nNote: \\(\\overrightarrow{PQ} = -\\overrightarrow{QP}\\), but \\(\\overrightarrow{PQ} \\neq \\overrightarrow{QP}\\)\n\n\n\n\nA unit vector is a vector that has a magnitude of 1 and is often used to indicate direction.\n\\[\n\\lvert \\overrightarrow{e} \\rvert = 1\n\\]\n\n\n\nTwo vectors \\(\\overrightarrow{a}\\) and \\(\\overrightarrow{b}\\) are called collinear or linearly dependent, if:\n\\[\n\\overrightarrow{b} = r \\overrightarrow{a} \\quad \\text{for } r \\in \\mathbb{R}\n\\] \\[\ns \\overrightarrow{b} =  \\overrightarrow{a} \\quad \\text{for } s \\in \\mathbb{R}\n\\]\nMore generally: \\[\nr \\overrightarrow{a} + s \\overrightarrow{b} = \\overrightarrow{0} \\quad \\text{for } r, s \\in \\mathbb{R} \\quad \\text{with } r \\neq 0 \\quad \\text{or } s \\neq 0\n\\]\nThis will be used to generalize definition of linear independence.\n\n\n\nFor every non-zero vector \\(\\overrightarrow{a}\\), there is exactly one unit vector (\\(\\overrightarrow{e}_a\\)) with the same direction. This process is called normalizing a vector.\n\\[\n\\overrightarrow{e}_a = \\dfrac{1}{\\lvert \\overrightarrow{a} \\rvert}\\overrightarrow{a}\n\\]\n\n\n\n\\[\n\\overrightarrow{PQ}\n=\n\\begin{bmatrix}\nx_2 - x_1 \\\\\ny_2 - y_1 \\\\\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#cartesian-coordinate-systems",
    "href": "hs25/lia1/lia1_notes.html#cartesian-coordinate-systems",
    "title": "Linear Algebra 01",
    "section": "",
    "text": "A Cartesian coordinate system is one in which the axes are perpendicular and the units on each axis have the same length. The unit vectors along the axes are typically denoted by \\(\\overrightarrow{e}_x\\) and \\(\\overrightarrow{e}_y\\). Every vector in this system can be represented as a linear combination of these unit vectors.\n\\[\n\\overrightarrow{a} = a_x\\overrightarrow{e}_x + a_y\\overrightarrow{e}_y\n\\]\n\nNote: \\(a_x\\) and \\(a_y\\) are called scalar components of \\(\\overrightarrow{a}\\)."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#d-space",
    "href": "hs25/lia1/lia1_notes.html#d-space",
    "title": "Linear Algebra 01",
    "section": "",
    "text": "Vectors in 3D space have an additional component to represent the third dimension.\n\\[\n\\overrightarrow{a} = \\begin{bmatrix}\n1 \\\\\n-3 \\\\\n2 \\\\\n\\end{bmatrix}\n\\]\n\nNote: The mathematical rules do not change by adding more dimensions."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#non-linear-equations",
    "href": "hs25/lia1/lia1_notes.html#non-linear-equations",
    "title": "Linear Algebra 01",
    "section": "Non-Linear equations",
    "text": "Non-Linear equations\n\nProduct of two unknown variables: \\(x \\cdot y + 1 = x\\)\nTrigonometric terms: \\(3\\sin x + y = 0\\)\nFractions of unknown variables: \\(\\dfrac{1}{x} + y = 1\\)"
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#matrix-notifications",
    "href": "hs25/lia1/lia1_notes.html#matrix-notifications",
    "title": "Linear Algebra 01",
    "section": "Matrix Notifications",
    "text": "Matrix Notifications\nTo generalize determination of solutions of linear equations, we can use the matrix notification.\n\\[\n\\begin{multline}\n2x + 3y = 10 \\\\\nx - y = -5\n\\end{multline}\n\\]\nShort hand notation by writing down coefficients only.\n\\[\n\\begin{pmatrix}\n2 & 3 & | & 10 \\\\\n1 & -1 & | & -5\n\\end{pmatrix}\n\\]\n\nNote: Called coefficient matrix."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#gaussian-elimination-method",
    "href": "hs25/lia1/lia1_notes.html#gaussian-elimination-method",
    "title": "Linear Algebra 01",
    "section": "Gaussian Elimination Method",
    "text": "Gaussian Elimination Method\nGoal of Gaussian elimination method is to apply sequence of elementary row operations in order to transform augmented matrix of a system into a matrix in row echelon form.\n\nNote: Echelon row form is not unique, since interchanging rows is allowed.\n\n\nBackward Substitution\nThe system of linear equations is written in a special type of matrix. Solution are easy to determine with so-called backward substitution.\n\\[\n\\begin{pmatrix}\n2 & 1 & 1 & | & 5 \\\\\n0 & 8 & 3 & | & 14 \\\\\n0 & 0 & 1 & | & 2\n\\end{pmatrix}\n\\]\n\n\nPivot element\nThe pivot element is a key element chosen at each step of an algorithm used to solve a system of linear equations.\n\nNote: The pivot element must be non-zero.\n\n\n\nTypes of Row Echelon Forms\n\nIn all rows and in all columns there is a pivot: System has unique solutions\nIn all rows there is a pivot, but not in all columns: Free variables, so system has infinitely many solutions.\nSome row has no pivot: System is inconsistent (no solutions)."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#set-of-solutions",
    "href": "hs25/lia1/lia1_notes.html#set-of-solutions",
    "title": "Linear Algebra 01",
    "section": "Set of Solutions",
    "text": "Set of Solutions\nOften a free parameter is denoted by \\(t\\): \\(t = y\\)\n\\[\nL = \\left\\{ \\begin{bmatrix} 3 \\\\ 0 \\\\ 1 \\end{bmatrix} + t \\begin{bmatrix} -3 \\\\ 1 \\\\ 0 \\end{bmatrix} \\mid t \\in \\mathbb{R} \\right\\}\n\\]\n\nNote: \\(t\\) vary over whole set \\(\\mathbb{R}\\), i.e., from \\(-\\infty\\) to \\(\\infty\\)"
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#special-matrices",
    "href": "hs25/lia1/lia1_notes.html#special-matrices",
    "title": "Linear Algebra 01",
    "section": "Special Matrices",
    "text": "Special Matrices\n\nSquared matrix: \\(n \\times n\\)\nColumn vector of dimension \\(n\\) (or vector): \\(n \\times 1\\)\nRow vector of dimension \\(n\\): \\(1 \\times n\\)\nZero matrix: All entries are zero.\nUpper/Lower square matrix\nDiagonal matrix: Only entries in main diagonal can be nonzero.\n\n\nNote: Set of all \\(n\\)-vectors with real entries: \\(\\mathbb{R}^n\\)"
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#matrix-operations",
    "href": "hs25/lia1/lia1_notes.html#matrix-operations",
    "title": "Linear Algebra 01",
    "section": "Matrix Operations",
    "text": "Matrix Operations\n\nTransposition\nTransposing a matrix means swapping rows and columns. If \\(A\\) is a matrix, then its transposed matrix \\(A^T\\) is defined by:\n\\[\n(A^T)_{ij} = A_{ji}\n\\]\n\nNote: Square matrix \\(A\\) is symmetric, if: \\(A^T = A\\)\n\n\n\nAddition and Subtraction\nAddition and subtraction of matrices are performed element by element. &gt; Note: Both matrices must have the same dimensions.\n\n\nScalar Multiplication\nIn scalar multiplication, each element is multiplied individually by the number.\n\nRules for addition and scalar multiplication of matrices\nLet \\(A, B, C \\in \\mathbb{R}^{m \\times n}\\) and \\(r, s \\in \\mathbb{R}\\):\n\n\\((A+B)+C = A+(B+C)\\) (Associativity)\n\\(A+B = B+A\\) (Commutativity)\n\\(A+\\mathcal{O}_{m,n} = A\\) (Neutral element of addition)\n\\(A+(-A) = \\mathcal{O}_{m,n}\\) (Inverse element of addition)\n\\(r(sA) = (rs)A\\) (Associativity)\n\\((r+s)A = rA+sA\\) (Distributivity)\n\\(r(A+B) = rA+rB\\) (Distributivity)\n\\(1 \\cdot A = A\\) (Neutral element of scalar mult.)\n\\((A+B)^T = A^T+B^T\\)\n\n\n\n\nMatrix Multiplication\nMatrix multiplication is the process of combining the rows of the first matrix with the columns of the second matrix. The number of columns in the first matrix must be equal to the number of rows in the second matrix. Each element of the result matrix is calculated by forming the scalar product (element-wise product and then sum) of a row from the first matrix and a column from the second matrix.\n\nNote: The order is crucial: \\(A \\times B\\) can be different from \\(B \\times A\\).\n\n\nMnemonic\n\\[\n(m \\times \\mathbf{\\color{red}{n}}) \\cdot (\\mathbf{\\color{red}{n}} \\times p) = (m \\times p)\n\\]\n\n\nRules for matrix multiplication\nLet \\(A, B, C\\) matrices such that following matrix multiplications exist:\n\n\\((AB)C = A(BC)\\) (Associativity)\n\\((A+B)C = AC + BC\\) (Distributivity)\n\\(A(B+C) = AB + AC\\) (Distributivity)\n\\((rA)B = A(rB) = r(AB)\\) for \\(r \\in \\mathbb{R}\\)\n\\(A \\cdot \\mathcal{O}_{n,q} = \\mathcal{O}_{m,q}\\) and \\(\\mathcal{O}_{p,m} \\cdot A = \\mathcal{O}_{p,n}\\) for \\(A \\in \\mathbb{R}^{m \\times n}\\)\n\\(I_m \\cdot A = A \\cdot I_n = A\\) for \\(A \\in \\mathbb{R}^{m \\times n}\\) (Neutr. El.)\n\\((AB)^T = B^T A^T\\)"
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#linear-sytsems-in-matrice-form",
    "href": "hs25/lia1/lia1_notes.html#linear-sytsems-in-matrice-form",
    "title": "Linear Algebra 01",
    "section": "Linear Sytsems in Matrice Form",
    "text": "Linear Sytsems in Matrice Form\nSystem with m equations and n unknowns can be expressed in form \\(Ax = b\\), where A is the coefficient matrix and b is the right-hand side of the system."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#linear-systems-on-vector-form",
    "href": "hs25/lia1/lia1_notes.html#linear-systems-on-vector-form",
    "title": "Linear Algebra 01",
    "section": "Linear Systems on Vector Form",
    "text": "Linear Systems on Vector Form\nThe system can be presented in form \\(x_aa_1 + \\dots x_na_n = b\\). If \\(x \\in \\mathbb{R^n}\\) is a solution of system, then b is a linear combination of column vectors \\(a_1, \\dots, a_n\\)."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#homogeneous-systems",
    "href": "hs25/lia1/lia1_notes.html#homogeneous-systems",
    "title": "Linear Algebra 01",
    "section": "Homogeneous Systems",
    "text": "Homogeneous Systems\nA linear system is homogeneous, if right-hand side is zero vector: \\(Ax = 0\\), where \\(A \\in \\mathbb{R}^{m \\times n}\\) and \\(x\\) is a vector of unknowns.\n\nNote: Zero vector \\(x = 0 \\in \\mathbb{R^n}\\) is trivially a solution of a homogeneous system\n\n\nInformation in a Linear System\nLet \\(A\\) be an (\\(m \\times n\\))-matrix and \\(T\\) be a row echelon form obtained from \\(A\\) using elementary row operations.\n\nRank of \\(A\\): Number of pivot-elements in \\(T\\).\nNullity of \\(A\\): Number of columns of \\(T\\) without pivot-elements.\n\n\nNote: Rank of matrix \\(A\\) is denoted by rk \\(A\\) and nullity of \\(A\\) by nullity \\(A\\).\n\nTherefore\n\\[\n\\text{rk } A + \\text{nullity } A = n = \\textsf{number of cols of } A\n\\]"
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#inhomogeneous-systems",
    "href": "hs25/lia1/lia1_notes.html#inhomogeneous-systems",
    "title": "Linear Algebra 01",
    "section": "Inhomogeneous Systems",
    "text": "Inhomogeneous Systems\nForm where \\(b \\ne 0\\) is a non-zero vector. Every solution x of the inhomogeneous system (\\(Ax=b\\)) can be written as the sum of a special (particular) solution \\(x_p\\) and a homogeneous solution \\(x_h\\):\n\\[\nx = x_p + x_h\n\\]\nThe entire solution set of the inhomogeneous system \\(Ax=b\\) thus consists of the shift of the solution space (or zero space) of the homogeneous system \\(Ax=0\\) by the vector \\(x_p\\).\n\n\n\nSolution set of a inhomogeneous system"
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#square-linear-systems",
    "href": "hs25/lia1/lia1_notes.html#square-linear-systems",
    "title": "Linear Algebra 01",
    "section": "Square Linear Systems",
    "text": "Square Linear Systems\nIf the number of equations and numbers of unknowns in a linear system coincide (\\(m = n\\)), than:\n\nnullity \\(A = 0\\).\nrk \\(A = n\\).\n\\(Ax = 0\\) admits only trivial solution \\(0\\).\n\\(Ax = b\\) has one and only one solution."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#rank-criterion",
    "href": "hs25/lia1/lia1_notes.html#rank-criterion",
    "title": "Linear Algebra 01",
    "section": "Rank Criterion",
    "text": "Rank Criterion\nA linear equation system \\(Ax=b\\) has at least one solution (is consistent) if and only if the rank of the coefficient matrix A is equal to the rank of the augmented coefficient matrix \\([A \\quad b]\\). The rank of the extended coefficient matrix \\([A \\quad b]\\) is created by appending the inhomogeneity vector b as an additional last column to the matrix \\(A\\)."
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#identity-matrix",
    "href": "hs25/lia1/lia1_notes.html#identity-matrix",
    "title": "Linear Algebra 01",
    "section": "Identity Matrix",
    "text": "Identity Matrix\nThe identity matrix of size \\(n\\) is the \\(n \\times n\\) square matrix with ones on the main diagonal and zeros elsewhere.\n\\[\nI =\n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & 1 & 0 \\\\\n0 & 0 & 1 \\\\\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "hs25/lia1/lia1_notes.html#calculate-the-inverse-matrix",
    "href": "hs25/lia1/lia1_notes.html#calculate-the-inverse-matrix",
    "title": "Linear Algebra 01",
    "section": "Calculate the Inverse Matrix",
    "text": "Calculate the Inverse Matrix\n\\[\n[A|I_n]\n\\]\nBy using elementary rows transformations transform left term A to row echelon form.\n\\[\n[I_n|\\tilde{A}]\n\\]\n\nRules of Inverse\nLet \\(A\\) and \\(B\\) be invertible (\\(n \\times n\\))-matrices and \\(s \\ne 0\\) a scalar. Then \\(A^{‚àí1}\\), \\(sA\\), \\(AB\\) and \\(A^\\)T are invertible and the following hold:\n\n\\((A^{-1})^{-1} = A\\)\n\\((sA)^{-1} = s^{-1}A^{-1}\\)\n\\((AB)^{-1} = B^{-1}A^{-1}\\)\n\\((A^T)^{-1} = (A^{-1})^T\\)\n\n\n\n\n\n\n\nCaution\n\n\n\nGenerally: \\[\n(AB)^{‚àí1} \\ne A^{‚àí1}B^{‚àí1}\n\\]\nFurthermore there is no rule for sum, so no rule for \\((A + B)^{‚àí1}\\), which could even not exist."
  },
  {
    "objectID": "sources.html",
    "href": "sources.html",
    "title": "Useful Resources",
    "section": "",
    "text": "Python\n\nW3Schools: A great starting point for beginners with Python basics and simple examples.\nReal Python: Comprehensive tutorials and advanced topics for a deeper dive into the language.\n\n\n\n\nSoftware Development\n\nW3Schools Git Tutorial: An easy-to-follow introduction to the fundamentals of version control with Git.\n\n\n\n\nData Science\n\nTowards Data Science :A collection of articles, tutorials, and guides on data analysis, machine learning, and AI.\n\n\n\n\nYouTube Channels\n\n3Blue1Brown: Visual explanations and animations that make complex math and scientific concepts intuitive.\nFireship: High-intensity code tutorials and tech news.\n\n\n\n\nVisualisations\n\nThe Wall Street journal guide to information graphics: Dos and dont‚Äôs of presenting data, facts and figures."
  },
  {
    "objectID": "howTo/pythonPackages.html",
    "href": "howTo/pythonPackages.html",
    "title": "How to‚Ä¶ Python Packages",
    "section": "",
    "text": "Introduction\nPython inherently offers useful functionalities such as print(), enumerate(), or list.append(). However, our projects often require more specific tools. This is where packages (or libraries) come in. Packages are extensions for Python that provide specialized functions and tools to efficiently solve a variety of problems.\nThe most frequently used packages include:\n\nnumpy: For fast numerical and mathematical computations.\npandas: For the efficient processing of large amounts of structured data (tables).\nmatplotlib: For creating data visualizations and diagrams.\n\nInstead of treating every function of these packages in detail, which would be too extensive, this summary focuses on practical application examples for each presented package.\n\n\nNumPy\nTransposing a matrix means swapping rows and columns. If \\(A\\) is a matrix, then its transposed matrix \\(A^T\\) is defined by:\n\\[\n(A^T)_{ij} = A_{ji}\n\\]\nIf one were to perform a matrix transposition with pure Python, one would have to manually iterate over rows and columns, leading to comparatively inefficient code.\n\nmatrix = [[1, 2], [3, 4]]\nrows = len(matrix)\ncols = len(matrix[0])\ntransposed = []\n\nfor i in range(cols):\n    new_row = []\n    for j in range(rows):\n        new_row.append(matrix[j][i])\n    transposed.append(new_row)\n\nprint(transposed)\n\n[[1, 3], [2, 4]]\n\n\nDepending on the size of the matrix, this process can be very time-consuming. With NumPy, we can use the optimized transposition function to solve this problem quickly and elegantly. NumPy operations are vectorized and run with significantly better performance.\n\nimport numpy as np\n\nmatrix = np.array([[1, 2], [3, 4]])\ntransposed = matrix.T\n\nprint(transposed)\n\n[[1 3]\n [2 4]]\n\n\n\n\nPandas\nWorking with structured data in native Python is possible, but quickly becomes complicated and error-prone with larger data sets. Even simply summarizing a table already requires a considerable amount of code and manual data processing.\n\nsum_col_a = 0.0\nsum_col_b = 0.0\ncount = 0\n\nwith open(\"data/pandasTable.csv\", \"r\") as f:\n    header = f.readline() \n    \n    for line in f:\n        values = line.strip().split(',')\n        sum_col_a += float(values[1])\n        sum_col_b += float(values[2])\n        count += 1\n\navg_col_a = 0.0\navg_col_b = 0.0\n\nif count &gt; 0:\n    avg_col_a = sum_col_a / count\n    avg_col_b = sum_col_b / count\n\nprint(\"Number of Records:\", count)\nprint(\"Column ColA:\")\nprint(\"  Sum:\", sum_col_a)\nprint(\"  Average:\", avg_col_a)\nprint(\"Column ColB:\")\nprint(\"  Sum:\", sum_col_b)\nprint(\"  Average:\", avg_col_b)\n\nNumber of Records: 5\nColumn ColA:\n  Sum: 82.2\n  Average: 16.44\nColumn ColB:\n  Sum: 805.0\n  Average: 161.0\n\n\nWith Pandas, we can easily read in structured data and retrieve summary statistics with a single function call, which simplifies data analysis considerably.\n\nimport pandas as pd\n\ndf = pd.read_csv(\"data/pandasTable.csv\")\ndf.describe()\n\n\n\n\n\n\n\n\nID\nhight\nwidth\nGroup\n\n\n\n\ncount\n5.000000\n5.000000\n5.000000\n5.00000\n\n\nmean\n3.000000\n16.440000\n161.000000\n1.80000\n\n\nstd\n1.581139\n10.582911\n108.880669\n0.83666\n\n\nmin\n1.000000\n5.900000\n50.000000\n1.00000\n\n\n25%\n2.000000\n10.500000\n100.000000\n1.00000\n\n\n50%\n3.000000\n12.700000\n125.000000\n2.00000\n\n\n75%\n4.000000\n20.100000\n200.000000\n2.00000\n\n\nmax\n5.000000\n33.000000\n330.000000\n3.00000\n\n\n\n\n\n\n\n\n\nMatplotlib\nData visualization in pure Python is a challenge, as the language was not designed for drawing diagrams without specialized packages.\n\ndata = {\"A\": 5, \"B\": 10, \"C\": 3}\nmax_val = max(data.values())\nscale = 50 / max_val  # Skalierung auf max. 50 Zeichen Breite\n\nfor key, value in data.items():\n    bar_length = int(value * scale)\n    print(f\"{key}: {'#' * bar_length} {value}\")\n\nA: ######################### 5\nB: ################################################## 10\nC: ############### 3\n\n\nFortunately, Matplotlib provides us with a versatile library with which we can create various types of diagrams.\n\nimport matplotlib.pyplot as plt\n\ndata = {\"A\": 5, \"B\": 10, \"C\": 3}\n\nkeys = list(data.keys())\nvalues = list(data.values())\n\nplt.figure()\nplt.bar(keys, values, color=['blue', 'red', 'green'])\n\nplt.title('Simple Data Visualization')\nplt.xlabel('Category')\nplt.ylabel('Value')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nMore to explore\nThousands of packages are available for Python. However, it is advisable to use well-maintained and established standard packages such as numpy, pandas, and matplotlib, as these are regularly updated and have large communities.\nIf you are looking for a specific tool, PyPI (Python Package Index) is the central hub: PIPY"
  },
  {
    "objectID": "howTo/git.html",
    "href": "howTo/git.html",
    "title": "How to‚Ä¶ Git and GitHub",
    "section": "",
    "text": "Git is a program designed to track and manage your code changes over time. We will discuss the difference between Git and GitHub in a moment, but first, let‚Äôs look at Git itself. You typically use Git in your terminal, though some IDEs (Integrated Development Environments) have Git extensions that provide a graphical user interface (UI)."
  },
  {
    "objectID": "howTo/git.html#create-a-git-repository",
    "href": "howTo/git.html#create-a-git-repository",
    "title": "How to‚Ä¶ Git and GitHub",
    "section": "1. Create a Git Repository",
    "text": "1. Create a Git Repository\nTo begin, we need to create a Git repository (a special folder) where Git starts tracking our code.\ngit init"
  },
  {
    "objectID": "howTo/git.html#write-code",
    "href": "howTo/git.html#write-code",
    "title": "How to‚Ä¶ Git and GitHub",
    "section": "2. Write Code",
    "text": "2. Write Code\nFirst, we‚Äôll create an empty code file to have a change to track.\ntouch my_code.py"
  },
  {
    "objectID": "howTo/git.html#stage-the-file",
    "href": "howTo/git.html#stage-the-file",
    "title": "How to‚Ä¶ Git and GitHub",
    "section": "3. Stage the File",
    "text": "3. Stage the File\nBy staging our changes, we prepare all files to be versioned by Git. They are moved into the ‚ÄúStaging Area‚Äù.\ngit add my_code.py"
  },
  {
    "objectID": "howTo/git.html#commit-the-changes",
    "href": "howTo/git.html#commit-the-changes",
    "title": "How to‚Ä¶ Git and GitHub",
    "section": "4. Commit the Changes",
    "text": "4. Commit the Changes\nNow we can commit our changes by saving them with a short note. The git commit command will save all changes we staged in the previous step.\ngit commit -m \"Initial commit: Created an empty file\"\nDone! Now we can start coding and come back to this point anytime we make a mistake."
  },
  {
    "objectID": "howTo/git.html#get-the-latest-code",
    "href": "howTo/git.html#get-the-latest-code",
    "title": "How to‚Ä¶ Git and GitHub",
    "section": "1. Get the Latest Code",
    "text": "1. Get the Latest Code\nBefore you start coding, make sure you have the newest version of the code from the Cloud.\ngit pull\nNow you can follow the normal Git workflow as you learned above."
  },
  {
    "objectID": "howTo/git.html#update-the-code-on-github",
    "href": "howTo/git.html#update-the-code-on-github",
    "title": "How to‚Ä¶ Git and GitHub",
    "section": "5. Update the Code on GitHub",
    "text": "5. Update the Code on GitHub\nYour committed changes are only saved locally. You need to push your commit to GitHub to update the code for all other users.\ngit push\n\nNote: This step only works when you have correctly followed the Git workflow by staging (git add) and committing (git commit) your changes first."
  }
]